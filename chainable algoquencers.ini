# INPUTS:
#  I1: [clock]
#  I2: [reset]

# OUTPUTS:
#  O1: [pitch 1]
#  O2: [pitch 2]
#  O3: [pitch 3]
#  O4: [pitch 4]
#  O5: [trig 1]
#  O6: [trig 2]
#  O7: [trig 3]
#  O8: [trig 4]

# GATES:
#  G1: [trig]

# CONTROLLER 1:
#  B1.1: [seq 1]
#  B1.2: [seq 2]
#  B1.3: [seq 5]
#  B1.4: [seq 6]
#  B1.5: [chain 1]
#  B1.6: [chain 2]

# CONTROLLER 2:
#  B2.1: [seq 3]
#  B2.2: [seq 4]
#  B2.3: [seq 7]
#  B2.4: [seq 8]
#  B2.5: [chain 3]
#  B2.6: [chain 4]

# CONTROLLER 3:
#  B3.1: [st/ch 1]
#  B3.2: [st/ch 2]
#  B3.3: [st/ch 5]
#  B3.4: [st/ch 6]
#  B3.5: [step 9]
#  B3.6: [step 10]
#  B3.7: [step 13]
#  B3.8: [step 14]

# CONTROLLER 4:
#  B4.1: [st/ch 3]
#  B4.2: [st/ch 4]
#  B4.3: [st/ch 7]
#  B4.4: [st/ch 8]
#  B4.5: [step 11]
#  B4.6: [step 12]
#  B4.7: [step 15]
#  B4.8: [step 16]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# high-level select
# -------------------------------------------------

# left 16 page select
[buttongroup]
    button1 = B1.1
    button2 = B1.2
    button3 = B2.1
    button4 = B2.2
    button5 = B1.3
    button6 = B1.4
    button7 = B2.3
    button8 = B2.4
    button9 = B1.5
    button10 = B1.6
    button11 = B2.5
    button12 = B2.6
    button13 = B1.7
    button14 = B1.8
    button15 = B2.7
    button16 = B2.8
    maxactive = 1
    minactive = 1
    preset = 0
    value1 = 1
    value2 = 1
    value3 = 1
    value4 = 1
    value5 = 1
    value6 = 1
    value7 = 1
    value8 = 1
    value9 = 1
    value10 = 1
    value11 = 1
    value12 = 1
    value13 = 1
    value14 = 1
    value15 = 1
    value16 = 1
    buttonoutput1 = _A1_SELECT
    buttonoutput2 = _A2_SELECT
    buttonoutput3 = _A3_SELECT
    buttonoutput4 = _A4_SELECT
    buttonoutput5 = _A5_SELECT
    buttonoutput6 = _A6_SELECT
    buttonoutput7 = _A7_SELECT
    buttonoutput8 = _A8_SELECT
    buttonoutput9 = _SELECT_CHAIN_1
    buttonoutput10 = _SELECT_CHAIN_2
    buttonoutput11 = _SELECT_CHAIN_3
    buttonoutput12 = _SELECT_CHAIN_4
    led1 = L1.1
    led2 = L1.2
    led3 = L2.1
    led4 = L2.2
    led5 = L1.3
    led6 = L1.4
    led7 = L2.3
    led8 = L2.4
    led9 = L1.5
    led10 = L1.6
    led11 = L2.5
    led12 = L2.6
    led13 = L1.7
    led14 = L1.8
    led15 = L2.7
    led16 = L2.8

# -------------------------------------------------
# shared algoquencers
# -------------------------------------------------

[algoquencer]
    startofbar = _A1_S
    trigger = _A1_T
    pitch = _A1_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A1_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A2_S
    trigger = _A2_T
    pitch = _A2_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A2_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A3_S
    trigger = _A3_T
    pitch = _A3_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A3_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A4_S
    trigger = _A4_T
    pitch = _A4_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A4_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A5_S
    trigger = _A5_T
    pitch = _A5_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A5_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A6_S
    trigger = _A6_T
    pitch = _A6_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A6_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A7_S
    trigger = _A7_T
    pitch = _A7_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A7_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _A8_S
    trigger = _A8_T
    pitch = _A8_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _A8_SELECT
    preset = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# -------------------------------------------------
# chain 1
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 8
    minactive = 1
    preset = 0
    select = _SELECT_CHAIN_1
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW
    buttonoutput2 = _2_ON_RAW
    buttonoutput3 = _3_ON_RAW
    buttonoutput4 = _4_ON_RAW
    buttonoutput5 = _5_ON_RAW
    buttonoutput6 = _6_ON_RAW
    buttonoutput7 = _7_ON_RAW
    buttonoutput8 = _8_ON_RAW
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW
    compare = 0
    ifequal = 200
    else = _1_ON_RAW
    output = _1_ON

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW
    compare = 0
    ifequal = 200
    else = _2_ON_RAW
    output = _2_ON

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW
    compare = 0
    ifequal = 200
    else = _3_ON_RAW
    output = _3_ON

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW
    compare = 0
    ifequal = 200
    else = _4_ON_RAW
    output = _4_ON

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW
    compare = 0
    ifequal = 200
    else = _5_ON_RAW
    output = _5_ON

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW
    compare = 0
    ifequal = 200
    else = _6_ON_RAW
    output = _6_ON

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW
    compare = 0
    ifequal = 200
    else = _7_ON_RAW
    output = _7_ON

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW
    compare = 0
    ifequal = 200
    else = _8_ON_RAW
    output = _8_ON

# min of 1 or 2 enabled
[math]
    input1 = _1_ON
    input2 = _2_ON
    minimum = _12_MIN

# min of 3 or 4 enabled
[math]
    input1 = _3_ON
    input2 = _4_ON
    minimum = _34_MIN

# min of 5 or 6 enabled
[math]
    input1 = _5_ON
    input2 = _6_ON
    minimum = _56_MIN

# min of 7 or 8 enabled
[math]
    input1 = _7_ON
    input2 = _8_ON
    minimum = _78_MIN

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN
    input2 = _34_MIN
    minimum = _1234_MIN

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN
    input2 = _78_MIN
    minimum = _5678_MIN

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN
    input2 = _5678_MIN
    minimum = _FIRST_ENABLED

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 1
    ifless = _2_ON
    else = 200
    output = _2_CANDIDATE

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 2
    ifless = _3_ON
    else = 200
    output = _3_CANDIDATE

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 3
    ifless = _4_ON
    else = 200
    output = _4_CANDIDATE

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 4
    ifless = _5_ON
    else = 200
    output = _5_CANDIDATE

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 5
    ifless = _6_ON
    else = 200
    output = _6_CANDIDATE

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 6
    ifless = _7_ON
    else = 200
    output = _7_CANDIDATE

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 7
    ifless = _8_ON
    else = 200
    output = _8_CANDIDATE

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE
    input2 = _4_CANDIDATE
    minimum = _34_CANDIDATE

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE
    input2 = _6_CANDIDATE
    minimum = _56_CANDIDATE

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE
    input2 = _8_CANDIDATE
    minimum = _78_CANDIDATE

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE
    input2 = _34_CANDIDATE
    minimum = _1234_CANDIDATE

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE
    input2 = _78_CANDIDATE
    minimum = _5678_CANDIDATE

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE
    input2 = _5678_CANDIDATE
    minimum = _NEXT_CANDIDATE

# _NEXT_OFFSET = next or looping to first sequencer in chain
[compare]
    input = _NEXT_CANDIDATE
    compare = 200
    ifequal = _FIRST_ENABLED - 1
    else = _NEXT_CANDIDATE - 1
    output = _NEXT_OFFSET

# start of bar for the current selected subsequencer
[switch]
    input1 = _A1_S
    input2 = _A2_S
    input3 = _A3_S
    input4 = _A4_S
    input5 = _A5_S
    input6 = _A6_S
    input7 = _A7_S
    input8 = _A8_S
    offset = _ACTIVE_OFFSET
    output1 = _SAMPLE_NEXT

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET
    sample = _SAMPLE_NEXT
    output = _ACTIVE_OFFSET

# output pitch for the current selected subsequencer
[switch]
    input1 = _A1_P
    input2 = _A2_P
    input3 = _A3_P
    input4 = _A4_P
    input5 = _A5_P
    input6 = _A6_P
    input7 = _A7_P
    input8 = _A8_P
    offset = _ACTIVE_OFFSET
    output1 = O1

# output trigger for the current selected subsequencer
[switch]
    input1 = _A1_T
    input2 = _A2_T
    input3 = _A3_T
    input4 = _A4_T
    input5 = _A5_T
    input6 = _A6_T
    input7 = _A7_T
    input8 = _A8_T
    offset = _ACTIVE_OFFSET
    output1 = O5

# -------------------------------------------------
# chain 2
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 8
    minactive = 1
    preset = 0
    select = _SELECT_CHAIN_2
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW2
    buttonoutput2 = _2_ON_RAW2
    buttonoutput3 = _3_ON_RAW2
    buttonoutput4 = _4_ON_RAW2
    buttonoutput5 = _5_ON_RAW2
    buttonoutput6 = _6_ON_RAW2
    buttonoutput7 = _7_ON_RAW2
    buttonoutput8 = _8_ON_RAW2
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW2
    compare = 0
    ifequal = 200
    else = _1_ON_RAW2
    output = _1_ON2

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW2
    compare = 0
    ifequal = 200
    else = _2_ON_RAW2
    output = _2_ON2

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW2
    compare = 0
    ifequal = 200
    else = _3_ON_RAW2
    output = _3_ON2

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW2
    compare = 0
    ifequal = 200
    else = _4_ON_RAW2
    output = _4_ON2

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW2
    compare = 0
    ifequal = 200
    else = _5_ON_RAW2
    output = _5_ON2

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW2
    compare = 0
    ifequal = 200
    else = _6_ON_RAW2
    output = _6_ON2

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW2
    compare = 0
    ifequal = 200
    else = _7_ON_RAW2
    output = _7_ON2

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW2
    compare = 0
    ifequal = 200
    else = _8_ON_RAW2
    output = _8_ON2

# min of 1 or 2 enabled
[math]
    input1 = _1_ON2
    input2 = _2_ON2
    minimum = _12_MIN2

# min of 3 or 4 enabled
[math]
    input1 = _3_ON2
    input2 = _4_ON2
    minimum = _34_MIN2

# min of 5 or 6 enabled
[math]
    input1 = _5_ON2
    input2 = _6_ON2
    minimum = _56_MIN2

# min of 7 or 8 enabled
[math]
    input1 = _7_ON2
    input2 = _8_ON2
    minimum = _78_MIN2

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN2
    input2 = _34_MIN2
    minimum = _1234_MIN2

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN2
    input2 = _78_MIN2
    minimum = _5678_MIN2

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN2
    input2 = _5678_MIN2
    minimum = _FIRST_ENABLED2

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 1
    ifless = _2_ON2
    else = 200
    output = _2_CANDIDATE2

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 2
    ifless = _3_ON2
    else = 200
    output = _3_CANDIDATE2

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 3
    ifless = _4_ON2
    else = 200
    output = _4_CANDIDATE2

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 4
    ifless = _5_ON2
    else = 200
    output = _5_CANDIDATE2

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 5
    ifless = _6_ON2
    else = 200
    output = _6_CANDIDATE2

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 6
    ifless = _7_ON2
    else = 200
    output = _7_CANDIDATE2

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 7
    ifless = _8_ON2
    else = 200
    output = _8_CANDIDATE2

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE2
    input2 = _4_CANDIDATE2
    minimum = _34_CANDIDATE2

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE2
    input2 = _6_CANDIDATE2
    minimum = _56_CANDIDATE2

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE2
    input2 = _8_CANDIDATE2
    minimum = _78_CANDIDATE2

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE2
    input2 = _34_CANDIDATE2
    minimum = _1234_CANDIDATE2

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE2
    input2 = _78_CANDIDATE2
    minimum = _5678_CANDIDATE2

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE2
    input2 = _5678_CANDIDATE2
    minimum = _NEXT_CANDIDATE2

# _NEXT_OFFSET = next or looping to first sequencer in chain
[compare]
    input = _NEXT_CANDIDATE2
    compare = 200
    ifequal = _FIRST_ENABLED2 - 1
    else = _NEXT_CANDIDATE2 - 1
    output = _NEXT_OFFSET2

# start of bar for the current selected subsequencer
[switch]
    input1 = _A1_S
    input2 = _A2_S
    input3 = _A3_S
    input4 = _A4_S
    input5 = _A5_S
    input6 = _A6_S
    input7 = _A7_S
    input8 = _A8_S
    offset = _ACTIVE_OFFSET2
    output1 = _SAMPLE_NEXT2

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET2
    sample = _SAMPLE_NEXT2
    output = _ACTIVE_OFFSET2

# output pitch for the current selected subsequencer
[switch]
    input1 = _A1_P
    input2 = _A2_P
    input3 = _A3_P
    input4 = _A4_P
    input5 = _A5_P
    input6 = _A6_P
    input7 = _A7_P
    input8 = _A8_P
    offset = _ACTIVE_OFFSET2
    output1 = O2

# output trigger for the current selected subsequencer
[switch]
    input1 = _A1_T
    input2 = _A2_T
    input3 = _A3_T
    input4 = _A4_T
    input5 = _A5_T
    input6 = _A6_T
    input7 = _A7_T
    input8 = _A8_T
    offset = _ACTIVE_OFFSET2
    output1 = O6

# -------------------------------------------------
# chain 3
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 8
    minactive = 1
    preset = 0
    select = _SELECT_CHAIN_3
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW3
    buttonoutput2 = _2_ON_RAW3
    buttonoutput3 = _3_ON_RAW3
    buttonoutput4 = _4_ON_RAW3
    buttonoutput5 = _5_ON_RAW3
    buttonoutput6 = _6_ON_RAW3
    buttonoutput7 = _7_ON_RAW3
    buttonoutput8 = _8_ON_RAW3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW3
    compare = 0
    ifequal = 200
    else = _1_ON_RAW3
    output = _1_ON3

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW3
    compare = 0
    ifequal = 200
    else = _2_ON_RAW3
    output = _2_ON3

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW3
    compare = 0
    ifequal = 200
    else = _3_ON_RAW3
    output = _3_ON3

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW3
    compare = 0
    ifequal = 200
    else = _4_ON_RAW3
    output = _4_ON3

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW3
    compare = 0
    ifequal = 200
    else = _5_ON_RAW3
    output = _5_ON3

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW3
    compare = 0
    ifequal = 200
    else = _6_ON_RAW3
    output = _6_ON3

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW3
    compare = 0
    ifequal = 200
    else = _7_ON_RAW3
    output = _7_ON3

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW3
    compare = 0
    ifequal = 200
    else = _8_ON_RAW3
    output = _8_ON3

# min of 1 or 2 enabled
[math]
    input1 = _1_ON3
    input2 = _2_ON3
    minimum = _12_MIN3

# min of 3 or 4 enabled
[math]
    input1 = _3_ON3
    input2 = _4_ON3
    minimum = _34_MIN3

# min of 5 or 6 enabled
[math]
    input1 = _5_ON3
    input2 = _6_ON3
    minimum = _56_MIN3

# min of 7 or 8 enabled
[math]
    input1 = _7_ON3
    input2 = _8_ON3
    minimum = _78_MIN3

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN3
    input2 = _34_MIN3
    minimum = _1234_MIN3

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN3
    input2 = _78_MIN3
    minimum = _5678_MIN3

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN3
    input2 = _5678_MIN3
    minimum = _FIRST_ENABLED3

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 1
    ifless = _2_ON3
    else = 200
    output = _2_CANDIDATE3

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 2
    ifless = _3_ON3
    else = 200
    output = _3_CANDIDATE3

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 3
    ifless = _4_ON3
    else = 200
    output = _4_CANDIDATE3

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 4
    ifless = _5_ON3
    else = 200
    output = _5_CANDIDATE3

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 5
    ifless = _6_ON3
    else = 200
    output = _6_CANDIDATE3

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 6
    ifless = _7_ON3
    else = 200
    output = _7_CANDIDATE3

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 7
    ifless = _8_ON3
    else = 200
    output = _8_CANDIDATE3

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE3
    input2 = _4_CANDIDATE3
    minimum = _34_CANDIDATE3

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE3
    input2 = _6_CANDIDATE3
    minimum = _56_CANDIDATE3

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE3
    input2 = _8_CANDIDATE3
    minimum = _78_CANDIDATE3

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE3
    input2 = _34_CANDIDATE3
    minimum = _1234_CANDIDATE3

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE3
    input2 = _78_CANDIDATE3
    minimum = _5678_CANDIDATE3

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE3
    input2 = _5678_CANDIDATE3
    minimum = _NEXT_CANDIDATE3

# _NEXT_OFFSET = next or looping to first sequencer in chain
[compare]
    input = _NEXT_CANDIDATE3
    compare = 200
    ifequal = _FIRST_ENABLED3 - 1
    else = _NEXT_CANDIDATE3 - 1
    output = _NEXT_OFFSET3

# start of bar for the current selected subsequencer
[switch]
    input1 = _A1_S
    input2 = _A2_S
    input3 = _A3_S
    input4 = _A4_S
    input5 = _A5_S
    input6 = _A6_S
    input7 = _A7_S
    input8 = _A8_S
    offset = _ACTIVE_OFFSET3
    output1 = _SAMPLE_NEXT3

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET3
    sample = _SAMPLE_NEXT3
    output = _ACTIVE_OFFSET3

# output pitch for the current selected subsequencer
[switch]
    input1 = _A1_P
    input2 = _A2_P
    input3 = _A3_P
    input4 = _A4_P
    input5 = _A5_P
    input6 = _A6_P
    input7 = _A7_P
    input8 = _A8_P
    offset = _ACTIVE_OFFSET3
    output1 = O3

# output trigger for the current selected subsequencer
[switch]
    input1 = _A1_T
    input2 = _A2_T
    input3 = _A3_T
    input4 = _A4_T
    input5 = _A5_T
    input6 = _A6_T
    input7 = _A7_T
    input8 = _A8_T
    offset = _ACTIVE_OFFSET3
    output1 = O7

# -------------------------------------------------
# chain 4
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 8
    minactive = 1
    preset = 0
    select = _SELECT_CHAIN_4
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW4
    buttonoutput2 = _2_ON_RAW4
    buttonoutput3 = _3_ON_RAW4
    buttonoutput4 = _4_ON_RAW4
    buttonoutput5 = _5_ON_RAW4
    buttonoutput6 = _6_ON_RAW4
    buttonoutput7 = _7_ON_RAW4
    buttonoutput8 = _8_ON_RAW4
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW4
    compare = 0
    ifequal = 200
    else = _1_ON_RAW4
    output = _1_ON4

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW4
    compare = 0
    ifequal = 200
    else = _2_ON_RAW4
    output = _2_ON4

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW4
    compare = 0
    ifequal = 200
    else = _3_ON_RAW4
    output = _3_ON4

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW4
    compare = 0
    ifequal = 200
    else = _4_ON_RAW4
    output = _4_ON4

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW4
    compare = 0
    ifequal = 200
    else = _5_ON_RAW4
    output = _5_ON4

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW4
    compare = 0
    ifequal = 200
    else = _6_ON_RAW4
    output = _6_ON4

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW4
    compare = 0
    ifequal = 200
    else = _7_ON_RAW4
    output = _7_ON4

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW4
    compare = 0
    ifequal = 200
    else = _8_ON_RAW4
    output = _8_ON4

# min of 1 or 2 enabled
[math]
    input1 = _1_ON4
    input2 = _2_ON4
    minimum = _12_MIN4

# min of 3 or 4 enabled
[math]
    input1 = _3_ON4
    input2 = _4_ON4
    minimum = _34_MIN4

# min of 5 or 6 enabled
[math]
    input1 = _5_ON4
    input2 = _6_ON4
    minimum = _56_MIN4

# min of 7 or 8 enabled
[math]
    input1 = _7_ON4
    input2 = _8_ON4
    minimum = _78_MIN4

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN4
    input2 = _34_MIN4
    minimum = _1234_MIN4

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN4
    input2 = _78_MIN4
    minimum = _5678_MIN4

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN4
    input2 = _5678_MIN4
    minimum = _FIRST_ENABLED4

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 1
    ifless = _2_ON4
    else = 200
    output = _2_CANDIDATE4

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 2
    ifless = _3_ON4
    else = 200
    output = _3_CANDIDATE4

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 3
    ifless = _4_ON4
    else = 200
    output = _4_CANDIDATE4

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 4
    ifless = _5_ON4
    else = 200
    output = _5_CANDIDATE4

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 5
    ifless = _6_ON4
    else = 200
    output = _6_CANDIDATE4

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 6
    ifless = _7_ON4
    else = 200
    output = _7_CANDIDATE4

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 7
    ifless = _8_ON4
    else = 200
    output = _8_CANDIDATE4

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE4
    input2 = _4_CANDIDATE4
    minimum = _34_CANDIDATE4

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE4
    input2 = _6_CANDIDATE4
    minimum = _56_CANDIDATE4

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE4
    input2 = _8_CANDIDATE4
    minimum = _78_CANDIDATE4

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE4
    input2 = _34_CANDIDATE4
    minimum = _1234_CANDIDATE4

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE4
    input2 = _78_CANDIDATE4
    minimum = _5678_CANDIDATE4

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE4
    input2 = _5678_CANDIDATE4
    minimum = _NEXT_CANDIDATE4

# _NEXT_OFFSET = next or looping to first sequencer in chain
[compare]
    input = _NEXT_CANDIDATE4
    compare = 200
    ifequal = _FIRST_ENABLED4 - 1
    else = _NEXT_CANDIDATE4 - 1
    output = _NEXT_OFFSET4

# start of bar for the current selected subsequencer
[switch]
    input1 = _A1_S
    input2 = _A2_S
    input3 = _A3_S
    input4 = _A4_S
    input5 = _A5_S
    input6 = _A6_S
    input7 = _A7_S
    input8 = _A8_S
    offset = _ACTIVE_OFFSET4
    output1 = _SAMPLE_NEXT4

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET4
    sample = _SAMPLE_NEXT4
    output = _ACTIVE_OFFSET4

# output pitch for the current selected subsequencer
[switch]
    input1 = _A1_P
    input2 = _A2_P
    input3 = _A3_P
    input4 = _A4_P
    input5 = _A5_P
    input6 = _A6_P
    input7 = _A7_P
    input8 = _A8_P
    offset = _ACTIVE_OFFSET4
    output1 = O4

# output trigger for the current selected subsequencer
[switch]
    input1 = _A1_T
    input2 = _A2_T
    input3 = _A3_T
    input4 = _A4_T
    input5 = _A5_T
    input6 = _A6_T
    input7 = _A7_T
    input8 = _A8_T
    offset = _ACTIVE_OFFSET4
    output1 = O8
