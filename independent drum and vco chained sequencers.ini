# INPUTS:
#  I1: [clock]
#  I2: [reset]

# OUTPUTS:
#  O1: [pitch 1]
#  O2: [pitch 2]
#  O3: [pitch 3]
#  O4: [pitch 4]
#  O5: [pitch 5]
#  O6: [pitch 6]
#  O7: [pitch 7]
#  O8: [pitch 8]

# GATES:
#  G1: [trig 1]
#  G2: [trig 2]
#  G3: [trig 3]
#  G4: [trig 4]
#  G5: [trig 5]
#  G6: [trig 6]
#  G7: [trig 7]
#  G8: [trig 8]

# CONTROLLER 1:
#  B1.1: [drm seq]
#  B1.2: [vco seq]
#  B1.3: [chain]
#  B1.4: [env]
#  B1.8: [preset]

# CONTROLLER 2:
#  B2.1: [sub 1]
#  B2.2: [sub 2]
#  B2.3: [sub 3]
#  B2.4: [sub 4]
#  B2.5: [sub 5]
#  B2.6: [sub 6]
#  B2.7: [sub 7]
#  B2.8: [sub 8]

# CONTROLLER 3:
#  B3.1: [1]
#  B3.2: [2]
#  B3.3: [5]
#  B3.4: [6]
#  B3.5: [9]
#  B3.6: [10]
#  B3.7: [13]
#  B3.8: [14]

# CONTROLLER 4:
#  B4.1: [3]
#  B4.2: [4]
#  B4.3: [7]
#  B4.4: [8]
#  B4.5: [11]
#  B4.6: [12]
#  B4.7: [15]
#  B4.8: [16]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# _SELECT
# -------------------------------------------------

# _MODE
[buttongroup]
    button1 = B1.1
    button2 = B1.2
    button3 = B1.3
    button4 = B1.4
    button5 = B1.5
    button6 = B1.6
    button7 = B1.7
    button8 = B1.8
    maxactive = 1
    minactive = 1
    preset = 0
    value1 = 10
    value2 = 20
    value3 = 30
    value4 = 40
    value5 = 50
    value6 = 60
    value7 = 70
    value8 = 80
    led1 = L1.1
    led2 = L1.2
    led3 = L1.3
    led4 = L1.4
    led5 = L1.5
    led6 = L1.6
    led7 = L1.7
    led8 = L1.8
    output = _MODE

# _SUBPAGE
[buttongroup]
    output = _SUBPAGE
    button1 = B2.1
    button2 = B2.2
    button3 = B2.3
    button4 = B2.4
    button5 = B2.5
    button6 = B2.6
    button7 = B2.7
    button8 = B2.8
    maxactive = 1
    minactive = 0
    preset = 0
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L2.1
    led2 = L2.2
    led3 = L2.3
    led4 = L2.4
    led5 = L2.5
    led6 = L2.6
    led7 = L2.7
    led8 = L2.8

# _MODE + _SUBPAGE = _SELECT
[math]
    input1 = _MODE
    input2 = _SUBPAGE
    sum = _SELECT

# -------------------------------------------------
# chain bottom right blank
# -------------------------------------------------

[buttongroup]
    button1 = B4.1
    button2 = B4.2
    button3 = B4.3
    button4 = B4.4
    button5 = B4.5
    button6 = B4.6
    button7 = B4.7
    button8 = B4.8
    maxactive = 0
    minactive = 0
    preset = 0
    select = _MODE
    selectat = 30
    led1 = L4.1
    led2 = L4.2
    led3 = L4.3
    led4 = L4.4
    led5 = L4.5
    led6 = L4.6
    led7 = L4.7
    led8 = L4.8

# -------------------------------------------------
# drum algoquencers
# -------------------------------------------------

# [algoquencer]
#   startofbar = _DRUM_ALGOQUENCER_1_S
#   trigger = _DRUM_ALGOQUENCER_1_T
#   pitch = _DRUM_ALGOQUENCER_1_P
#   clock = I1
#   reset = I2
#   button1 = B3.1
#   button2 = B3.2
#   button3 = B4.1
#   button4 = B4.2
#   button5 = B3.3
#   button6 = B3.4
#   button7 = B4.3
#   button8 = B4.4
#   button9 = B3.5
#   button10 = B3.6
#   button11 = B4.5
#   button12 = B4.6
#   button13 = B3.7
#   button14 = B3.8
#   button15 = B4.7
#   button16 = B4.8
#   length = 16
#   pattern = 0
#   select = _SELECT
#   selectat = 11
#   preset = _PRESET
#   led1 = L3.1
#   led2 = L3.2
#   led3 = L4.1
#   led4 = L4.2
#   led5 = L3.3
#   led6 = L3.4
#   led7 = L4.3
#   led8 = L4.4
#   led9 = L3.5
#   led10 = L3.6
#   led11 = L4.5
#   led12 = L4.6
#   led13 = L3.7
#   led14 = L3.8
#   led15 = L4.7
#   led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_2_S
    trigger = _DRUM_ALGOQUENCER_2_T
    pitch = _DRUM_ALGOQUENCER_2_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 12
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_3_S
    trigger = _DRUM_ALGOQUENCER_3_T
    pitch = _DRUM_ALGOQUENCER_3_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 13
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_4_S
    trigger = _DRUM_ALGOQUENCER_4_T
    pitch = _DRUM_ALGOQUENCER_4_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 14
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_5_S
    trigger = _DRUM_ALGOQUENCER_5_T
    pitch = _DRUM_ALGOQUENCER_5_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 15
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_6_S
    trigger = _DRUM_ALGOQUENCER_6_T
    pitch = _DRUM_ALGOQUENCER_6_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 16
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_7_S
    trigger = _DRUM_ALGOQUENCER_7_T
    pitch = _DRUM_ALGOQUENCER_7_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 17
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_8_S
    trigger = _DRUM_ALGOQUENCER_8_T
    pitch = _DRUM_ALGOQUENCER_8_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 18
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# -------------------------------------------------
# chain 1
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 31
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW
    buttonoutput2 = _2_ON_RAW
    buttonoutput3 = _3_ON_RAW
    buttonoutput4 = _4_ON_RAW
    buttonoutput5 = _5_ON_RAW
    buttonoutput6 = _6_ON_RAW
    buttonoutput7 = _7_ON_RAW
    buttonoutput8 = _8_ON_RAW
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW
    compare = 0
    ifequal = 200
    else = _1_ON_RAW
    output = _1_ON

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW
    compare = 0
    ifequal = 200
    else = _2_ON_RAW
    output = _2_ON

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW
    compare = 0
    ifequal = 200
    else = _3_ON_RAW
    output = _3_ON

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW
    compare = 0
    ifequal = 200
    else = _4_ON_RAW
    output = _4_ON

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW
    compare = 0
    ifequal = 200
    else = _5_ON_RAW
    output = _5_ON

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW
    compare = 0
    ifequal = 200
    else = _6_ON_RAW
    output = _6_ON

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW
    compare = 0
    ifequal = 200
    else = _7_ON_RAW
    output = _7_ON

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW
    compare = 0
    ifequal = 200
    else = _8_ON_RAW
    output = _8_ON

# min of 1 or 2 enabled
[math]
    input1 = _1_ON
    input2 = _2_ON
    minimum = _12_MIN

# min of 3 or 4 enabled
[math]
    input1 = _3_ON
    input2 = _4_ON
    minimum = _34_MIN

# min of 5 or 6 enabled
[math]
    input1 = _5_ON
    input2 = _6_ON
    minimum = _56_MIN

# min of 7 or 8 enabled
[math]
    input1 = _7_ON
    input2 = _8_ON
    minimum = _78_MIN

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN
    input2 = _34_MIN
    minimum = _1234_MIN

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN
    input2 = _78_MIN
    minimum = _5678_MIN

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN
    input2 = _5678_MIN
    minimum = _FIRST_ENABLED

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 1
    ifless = _2_ON
    else = 200
    output = _2_CANDIDATE

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 2
    ifless = _3_ON
    else = 200
    output = _3_CANDIDATE

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 3
    ifless = _4_ON
    else = 200
    output = _4_CANDIDATE

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 4
    ifless = _5_ON
    else = 200
    output = _5_CANDIDATE

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 5
    ifless = _6_ON
    else = 200
    output = _6_CANDIDATE

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 6
    ifless = _7_ON
    else = 200
    output = _7_CANDIDATE

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 7
    ifless = _8_ON
    else = 200
    output = _8_CANDIDATE

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE
    input2 = _4_CANDIDATE
    minimum = _34_CANDIDATE

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE
    input2 = _6_CANDIDATE
    minimum = _56_CANDIDATE

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE
    input2 = _8_CANDIDATE
    minimum = _78_CANDIDATE

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE
    input2 = _34_CANDIDATE
    minimum = _1234_CANDIDATE

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE
    input2 = _78_CANDIDATE
    minimum = _5678_CANDIDATE

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE
    input2 = _5678_CANDIDATE
    minimum = _NEXT_CANDIDATE
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED
    else = -1 * 1 + _NEXT_CANDIDATE
    output = _NEXT_OFFSET

# start of bar for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_S
    input2 = _DRUM_ALGOQUENCER_2_S
    input3 = _DRUM_ALGOQUENCER_3_S
    input4 = _DRUM_ALGOQUENCER_4_S
    input5 = _DRUM_ALGOQUENCER_5_S
    input6 = _DRUM_ALGOQUENCER_6_S
    input7 = _DRUM_ALGOQUENCER_7_S
    input8 = _DRUM_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET
    output1 = _SAMPLE_NEXT

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET
    sample = _SAMPLE_NEXT
    output = _ACTIVE_OFFSET

# output trigger for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_T
    input2 = _DRUM_ALGOQUENCER_2_T
    input3 = _DRUM_ALGOQUENCER_3_T
    input4 = _DRUM_ALGOQUENCER_4_T
    input5 = _DRUM_ALGOQUENCER_5_T
    input6 = _DRUM_ALGOQUENCER_6_T
    input7 = _DRUM_ALGOQUENCER_7_T
    input8 = _DRUM_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET
    output1 = G1

# -------------------------------------------------
# chain 2
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 33
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW2
    buttonoutput2 = _2_ON_RAW2
    buttonoutput3 = _3_ON_RAW2
    buttonoutput4 = _4_ON_RAW2
    buttonoutput5 = _5_ON_RAW2
    buttonoutput6 = _6_ON_RAW2
    buttonoutput7 = _7_ON_RAW2
    buttonoutput8 = _8_ON_RAW2
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW2
    compare = 0
    ifequal = 200
    else = _1_ON_RAW2
    output = _1_ON2

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW2
    compare = 0
    ifequal = 200
    else = _2_ON_RAW2
    output = _2_ON2

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW2
    compare = 0
    ifequal = 200
    else = _3_ON_RAW2
    output = _3_ON2

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW2
    compare = 0
    ifequal = 200
    else = _4_ON_RAW2
    output = _4_ON2

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW2
    compare = 0
    ifequal = 200
    else = _5_ON_RAW2
    output = _5_ON2

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW2
    compare = 0
    ifequal = 200
    else = _6_ON_RAW2
    output = _6_ON2

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW2
    compare = 0
    ifequal = 200
    else = _7_ON_RAW2
    output = _7_ON2

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW2
    compare = 0
    ifequal = 200
    else = _8_ON_RAW2
    output = _8_ON2

# min of 1 or 2 enabled
[math]
    input1 = _1_ON2
    input2 = _2_ON2
    minimum = _12_MIN2

# min of 3 or 4 enabled
[math]
    input1 = _3_ON2
    input2 = _4_ON2
    minimum = _34_MIN2

# min of 5 or 6 enabled
[math]
    input1 = _5_ON2
    input2 = _6_ON2
    minimum = _56_MIN2

# min of 7 or 8 enabled
[math]
    input1 = _7_ON2
    input2 = _8_ON2
    minimum = _78_MIN2

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN2
    input2 = _34_MIN2
    minimum = _1234_MIN2

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN2
    input2 = _78_MIN2
    minimum = _5678_MIN2

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN2
    input2 = _5678_MIN2
    minimum = _FIRST_ENABLED2

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 1
    ifless = _2_ON2
    else = 200
    output = _2_CANDIDATE2

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 2
    ifless = _3_ON2
    else = 200
    output = _3_CANDIDATE2

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 3
    ifless = _4_ON2
    else = 200
    output = _4_CANDIDATE2

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 4
    ifless = _5_ON2
    else = 200
    output = _5_CANDIDATE2

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 5
    ifless = _6_ON2
    else = 200
    output = _6_CANDIDATE2

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 6
    ifless = _7_ON2
    else = 200
    output = _7_CANDIDATE2

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 7
    ifless = _8_ON2
    else = 200
    output = _8_CANDIDATE2

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE2
    input2 = _4_CANDIDATE2
    minimum = _34_CANDIDATE2

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE2
    input2 = _6_CANDIDATE2
    minimum = _56_CANDIDATE2

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE2
    input2 = _8_CANDIDATE2
    minimum = _78_CANDIDATE2

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE2
    input2 = _34_CANDIDATE2
    minimum = _1234_CANDIDATE2

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE2
    input2 = _78_CANDIDATE2
    minimum = _5678_CANDIDATE2

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE2
    input2 = _5678_CANDIDATE2
    minimum = _NEXT_CANDIDATE2
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE2
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED2
    else = -1 * 1 + _NEXT_CANDIDATE2
    output = _NEXT_OFFSET2

# start of bar for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_S
    input2 = _DRUM_ALGOQUENCER_2_S
    input3 = _DRUM_ALGOQUENCER_3_S
    input4 = _DRUM_ALGOQUENCER_4_S
    input5 = _DRUM_ALGOQUENCER_5_S
    input6 = _DRUM_ALGOQUENCER_6_S
    input7 = _DRUM_ALGOQUENCER_7_S
    input8 = _DRUM_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET2
    output1 = _SAMPLE_NEXT2

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET2
    sample = _SAMPLE_NEXT2
    output = _ACTIVE_OFFSET2

# output pitch for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_P
    input2 = _DRUM_ALGOQUENCER_2_P
    input3 = _DRUM_ALGOQUENCER_3_P
    input4 = _DRUM_ALGOQUENCER_4_P
    input5 = _DRUM_ALGOQUENCER_5_P
    input6 = _DRUM_ALGOQUENCER_6_P
    input7 = _DRUM_ALGOQUENCER_7_P
    input8 = _DRUM_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET2
    output1 = O2

# output trigger for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_T
    input2 = _DRUM_ALGOQUENCER_2_T
    input3 = _DRUM_ALGOQUENCER_3_T
    input4 = _DRUM_ALGOQUENCER_4_T
    input5 = _DRUM_ALGOQUENCER_5_T
    input6 = _DRUM_ALGOQUENCER_6_T
    input7 = _DRUM_ALGOQUENCER_7_T
    input8 = _DRUM_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET2
    output1 = G2

# -------------------------------------------------
# chain 3
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 35
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW3
    buttonoutput2 = _2_ON_RAW3
    buttonoutput3 = _3_ON_RAW3
    buttonoutput4 = _4_ON_RAW3
    buttonoutput5 = _5_ON_RAW3
    buttonoutput6 = _6_ON_RAW3
    buttonoutput7 = _7_ON_RAW3
    buttonoutput8 = _8_ON_RAW3
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW3
    compare = 0
    ifequal = 200
    else = _1_ON_RAW3
    output = _1_ON3

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW3
    compare = 0
    ifequal = 200
    else = _2_ON_RAW3
    output = _2_ON3

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW3
    compare = 0
    ifequal = 200
    else = _3_ON_RAW3
    output = _3_ON3

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW3
    compare = 0
    ifequal = 200
    else = _4_ON_RAW3
    output = _4_ON3

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW3
    compare = 0
    ifequal = 200
    else = _5_ON_RAW3
    output = _5_ON3

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW3
    compare = 0
    ifequal = 200
    else = _6_ON_RAW3
    output = _6_ON3

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW3
    compare = 0
    ifequal = 200
    else = _7_ON_RAW3
    output = _7_ON3

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW3
    compare = 0
    ifequal = 200
    else = _8_ON_RAW3
    output = _8_ON3

# min of 1 or 2 enabled
[math]
    input1 = _1_ON3
    input2 = _2_ON3
    minimum = _12_MIN3

# min of 3 or 4 enabled
[math]
    input1 = _3_ON3
    input2 = _4_ON3
    minimum = _34_MIN3

# min of 5 or 6 enabled
[math]
    input1 = _5_ON3
    input2 = _6_ON3
    minimum = _56_MIN3

# min of 7 or 8 enabled
[math]
    input1 = _7_ON3
    input2 = _8_ON3
    minimum = _78_MIN3

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN3
    input2 = _34_MIN3
    minimum = _1234_MIN3

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN3
    input2 = _78_MIN3
    minimum = _5678_MIN3

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN3
    input2 = _5678_MIN3
    minimum = _FIRST_ENABLED3

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 1
    ifless = _2_ON3
    else = 200
    output = _2_CANDIDATE3

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 2
    ifless = _3_ON3
    else = 200
    output = _3_CANDIDATE3

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 3
    ifless = _4_ON3
    else = 200
    output = _4_CANDIDATE3

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 4
    ifless = _5_ON3
    else = 200
    output = _5_CANDIDATE3

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 5
    ifless = _6_ON3
    else = 200
    output = _6_CANDIDATE3

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 6
    ifless = _7_ON3
    else = 200
    output = _7_CANDIDATE3

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 7
    ifless = _8_ON3
    else = 200
    output = _8_CANDIDATE3

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE3
    input2 = _4_CANDIDATE3
    minimum = _34_CANDIDATE3

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE3
    input2 = _6_CANDIDATE3
    minimum = _56_CANDIDATE3

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE3
    input2 = _8_CANDIDATE3
    minimum = _78_CANDIDATE3

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE3
    input2 = _34_CANDIDATE3
    minimum = _1234_CANDIDATE3

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE3
    input2 = _78_CANDIDATE3
    minimum = _5678_CANDIDATE3

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE3
    input2 = _5678_CANDIDATE3
    minimum = _NEXT_CANDIDATE3
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE3
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED3
    else = -1 * 1 + _NEXT_CANDIDATE3
    output = _NEXT_OFFSET3

# start of bar for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_S
    input2 = _DRUM_ALGOQUENCER_2_S
    input3 = _DRUM_ALGOQUENCER_3_S
    input4 = _DRUM_ALGOQUENCER_4_S
    input5 = _DRUM_ALGOQUENCER_5_S
    input6 = _DRUM_ALGOQUENCER_6_S
    input7 = _DRUM_ALGOQUENCER_7_S
    input8 = _DRUM_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET3
    output1 = _SAMPLE_NEXT3

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET3
    sample = _SAMPLE_NEXT3
    output = _ACTIVE_OFFSET3

# output pitch for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_P
    input2 = _DRUM_ALGOQUENCER_2_P
    input3 = _DRUM_ALGOQUENCER_3_P
    input4 = _DRUM_ALGOQUENCER_4_P
    input5 = _DRUM_ALGOQUENCER_5_P
    input6 = _DRUM_ALGOQUENCER_6_P
    input7 = _DRUM_ALGOQUENCER_7_P
    input8 = _DRUM_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET3
    output1 = O3

# output trigger for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_T
    input2 = _DRUM_ALGOQUENCER_2_T
    input3 = _DRUM_ALGOQUENCER_3_T
    input4 = _DRUM_ALGOQUENCER_4_T
    input5 = _DRUM_ALGOQUENCER_5_T
    input6 = _DRUM_ALGOQUENCER_6_T
    input7 = _DRUM_ALGOQUENCER_7_T
    input8 = _DRUM_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET3
    output1 = G3

# -------------------------------------------------
# chain 4
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 37
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW4
    buttonoutput2 = _2_ON_RAW4
    buttonoutput3 = _3_ON_RAW4
    buttonoutput4 = _4_ON_RAW4
    buttonoutput5 = _5_ON_RAW4
    buttonoutput6 = _6_ON_RAW4
    buttonoutput7 = _7_ON_RAW4
    buttonoutput8 = _8_ON_RAW4
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW4
    compare = 0
    ifequal = 200
    else = _1_ON_RAW4
    output = _1_ON4

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW4
    compare = 0
    ifequal = 200
    else = _2_ON_RAW4
    output = _2_ON4

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW4
    compare = 0
    ifequal = 200
    else = _3_ON_RAW4
    output = _3_ON4

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW4
    compare = 0
    ifequal = 200
    else = _4_ON_RAW4
    output = _4_ON4

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW4
    compare = 0
    ifequal = 200
    else = _5_ON_RAW4
    output = _5_ON4

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW4
    compare = 0
    ifequal = 200
    else = _6_ON_RAW4
    output = _6_ON4

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW4
    compare = 0
    ifequal = 200
    else = _7_ON_RAW4
    output = _7_ON4

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW4
    compare = 0
    ifequal = 200
    else = _8_ON_RAW4
    output = _8_ON4

# min of 1 or 2 enabled
[math]
    input1 = _1_ON4
    input2 = _2_ON4
    minimum = _12_MIN4

# min of 3 or 4 enabled
[math]
    input1 = _3_ON4
    input2 = _4_ON4
    minimum = _34_MIN4

# min of 5 or 6 enabled
[math]
    input1 = _5_ON4
    input2 = _6_ON4
    minimum = _56_MIN4

# min of 7 or 8 enabled
[math]
    input1 = _7_ON4
    input2 = _8_ON4
    minimum = _78_MIN4

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN4
    input2 = _34_MIN4
    minimum = _1234_MIN4

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN4
    input2 = _78_MIN4
    minimum = _5678_MIN4

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN4
    input2 = _5678_MIN4
    minimum = _FIRST_ENABLED4

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 1
    ifless = _2_ON4
    else = 200
    output = _2_CANDIDATE4

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 2
    ifless = _3_ON4
    else = 200
    output = _3_CANDIDATE4

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 3
    ifless = _4_ON4
    else = 200
    output = _4_CANDIDATE4

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 4
    ifless = _5_ON4
    else = 200
    output = _5_CANDIDATE4

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 5
    ifless = _6_ON4
    else = 200
    output = _6_CANDIDATE4

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 6
    ifless = _7_ON4
    else = 200
    output = _7_CANDIDATE4

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 7
    ifless = _8_ON4
    else = 200
    output = _8_CANDIDATE4

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE4
    input2 = _4_CANDIDATE4
    minimum = _34_CANDIDATE4

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE4
    input2 = _6_CANDIDATE4
    minimum = _56_CANDIDATE4

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE4
    input2 = _8_CANDIDATE4
    minimum = _78_CANDIDATE4

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE4
    input2 = _34_CANDIDATE4
    minimum = _1234_CANDIDATE4

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE4
    input2 = _78_CANDIDATE4
    minimum = _5678_CANDIDATE4

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE4
    input2 = _5678_CANDIDATE4
    minimum = _NEXT_CANDIDATE4
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE4
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED4
    else = -1 * 1 + _NEXT_CANDIDATE4
    output = _NEXT_OFFSET4

# start of bar for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_S
    input2 = _DRUM_ALGOQUENCER_2_S
    input3 = _DRUM_ALGOQUENCER_3_S
    input4 = _DRUM_ALGOQUENCER_4_S
    input5 = _DRUM_ALGOQUENCER_5_S
    input6 = _DRUM_ALGOQUENCER_6_S
    input7 = _DRUM_ALGOQUENCER_7_S
    input8 = _DRUM_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET4
    output1 = _SAMPLE_NEXT4

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET4
    sample = _SAMPLE_NEXT4
    output = _ACTIVE_OFFSET4

# output pitch for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_P
    input2 = _DRUM_ALGOQUENCER_2_P
    input3 = _DRUM_ALGOQUENCER_3_P
    input4 = _DRUM_ALGOQUENCER_4_P
    input5 = _DRUM_ALGOQUENCER_5_P
    input6 = _DRUM_ALGOQUENCER_6_P
    input7 = _DRUM_ALGOQUENCER_7_P
    input8 = _DRUM_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET4
    output1 = O4

# output trigger for the current selected subsequencer
[switch]
    input1 = _DRUM_ALGOQUENCER_1_T
    input2 = _DRUM_ALGOQUENCER_2_T
    input3 = _DRUM_ALGOQUENCER_3_T
    input4 = _DRUM_ALGOQUENCER_4_T
    input5 = _DRUM_ALGOQUENCER_5_T
    input6 = _DRUM_ALGOQUENCER_6_T
    input7 = _DRUM_ALGOQUENCER_7_T
    input8 = _DRUM_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET4
    output1 = G4

# -------------------------------------------------
# vco algoquencers
# -------------------------------------------------

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_1_S
    trigger = _VCO_ALGOQUENCER_1_T
    pitch = _VCO_ALGOQUENCER_1_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 21
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_2_S
    trigger = _VCO_ALGOQUENCER_2_T
    pitch = _VCO_ALGOQUENCER_2_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 22
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_3_S
    trigger = _VCO_ALGOQUENCER_3_T
    pitch = _VCO_ALGOQUENCER_3_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 23
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_4_S
    trigger = _VCO_ALGOQUENCER_4_T
    pitch = _VCO_ALGOQUENCER_4_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 24
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_5_S
    trigger = _VCO_ALGOQUENCER_5_T
    pitch = _VCO_ALGOQUENCER_5_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 25
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_6_S
    trigger = _VCO_ALGOQUENCER_6_T
    pitch = _VCO_ALGOQUENCER_6_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 26
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_7_S
    trigger = _VCO_ALGOQUENCER_7_T
    pitch = _VCO_ALGOQUENCER_7_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 27
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    startofbar = _VCO_ALGOQUENCER_8_S
    trigger = _VCO_ALGOQUENCER_8_T
    pitch = _VCO_ALGOQUENCER_8_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 28
    preset = _PRESET
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# -------------------------------------------------
# chain 5
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 32
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW5
    buttonoutput2 = _2_ON_RAW5
    buttonoutput3 = _3_ON_RAW5
    buttonoutput4 = _4_ON_RAW5
    buttonoutput5 = _5_ON_RAW5
    buttonoutput6 = _6_ON_RAW5
    buttonoutput7 = _7_ON_RAW5
    buttonoutput8 = _8_ON_RAW5
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW5
    compare = 0
    ifequal = 200
    else = _1_ON_RAW5
    output = _1_ON5

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW5
    compare = 0
    ifequal = 200
    else = _2_ON_RAW5
    output = _2_ON5

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW5
    compare = 0
    ifequal = 200
    else = _3_ON_RAW5
    output = _3_ON5

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW5
    compare = 0
    ifequal = 200
    else = _4_ON_RAW5
    output = _4_ON5

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW5
    compare = 0
    ifequal = 200
    else = _5_ON_RAW5
    output = _5_ON5

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW5
    compare = 0
    ifequal = 200
    else = _6_ON_RAW5
    output = _6_ON5

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW5
    compare = 0
    ifequal = 200
    else = _7_ON_RAW5
    output = _7_ON5

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW5
    compare = 0
    ifequal = 200
    else = _8_ON_RAW5
    output = _8_ON5

# min of 1 or 2 enabled
[math]
    input1 = _1_ON5
    input2 = _2_ON5
    minimum = _12_MIN5

# min of 3 or 4 enabled
[math]
    input1 = _3_ON5
    input2 = _4_ON5
    minimum = _34_MIN5

# min of 5 or 6 enabled
[math]
    input1 = _5_ON5
    input2 = _6_ON5
    minimum = _56_MIN5

# min of 7 or 8 enabled
[math]
    input1 = _7_ON5
    input2 = _8_ON5
    minimum = _78_MIN5

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN5
    input2 = _34_MIN5
    minimum = _1234_MIN5

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN5
    input2 = _78_MIN5
    minimum = _5678_MIN5

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN5
    input2 = _5678_MIN5
    minimum = _FIRST_ENABLED5

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 1
    ifless = _2_ON5
    else = 200
    output = _2_CANDIDATE5

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 2
    ifless = _3_ON5
    else = 200
    output = _3_CANDIDATE5

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 3
    ifless = _4_ON5
    else = 200
    output = _4_CANDIDATE5

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 4
    ifless = _5_ON5
    else = 200
    output = _5_CANDIDATE5

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 5
    ifless = _6_ON5
    else = 200
    output = _6_CANDIDATE5

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 6
    ifless = _7_ON5
    else = 200
    output = _7_CANDIDATE5

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 7
    ifless = _8_ON5
    else = 200
    output = _8_CANDIDATE5

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE5
    input2 = _4_CANDIDATE5
    minimum = _34_CANDIDATE5

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE5
    input2 = _6_CANDIDATE5
    minimum = _56_CANDIDATE5

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE5
    input2 = _8_CANDIDATE5
    minimum = _78_CANDIDATE5

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE5
    input2 = _34_CANDIDATE5
    minimum = _1234_CANDIDATE5

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE5
    input2 = _78_CANDIDATE5
    minimum = _5678_CANDIDATE5

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE5
    input2 = _5678_CANDIDATE5
    minimum = _NEXT_CANDIDATE5
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE5
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED5
    else = -1 * 1 + _NEXT_CANDIDATE5
    output = _NEXT_OFFSET5

# start of bar for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_S
    input2 = _VCO_ALGOQUENCER_2_S
    input3 = _VCO_ALGOQUENCER_3_S
    input4 = _VCO_ALGOQUENCER_4_S
    input5 = _VCO_ALGOQUENCER_5_S
    input6 = _VCO_ALGOQUENCER_6_S
    input7 = _VCO_ALGOQUENCER_7_S
    input8 = _VCO_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET5
    output1 = _SAMPLE_NEXT5

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET5
    sample = _SAMPLE_NEXT5
    output = _ACTIVE_OFFSET5

# output pitch for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_P
    input2 = _VCO_ALGOQUENCER_2_P
    input3 = _VCO_ALGOQUENCER_3_P
    input4 = _VCO_ALGOQUENCER_4_P
    input5 = _VCO_ALGOQUENCER_5_P
    input6 = _VCO_ALGOQUENCER_6_P
    input7 = _VCO_ALGOQUENCER_7_P
    input8 = _VCO_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET5
    output1 = O5

# output trigger for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_T
    input2 = _VCO_ALGOQUENCER_2_T
    input3 = _VCO_ALGOQUENCER_3_T
    input4 = _VCO_ALGOQUENCER_4_T
    input5 = _VCO_ALGOQUENCER_5_T
    input6 = _VCO_ALGOQUENCER_6_T
    input7 = _VCO_ALGOQUENCER_7_T
    input8 = _VCO_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET5
    output1 = G5

# -------------------------------------------------
# chain 6
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 34
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW6
    buttonoutput2 = _2_ON_RAW6
    buttonoutput3 = _3_ON_RAW6
    buttonoutput4 = _4_ON_RAW6
    buttonoutput5 = _5_ON_RAW6
    buttonoutput6 = _6_ON_RAW6
    buttonoutput7 = _7_ON_RAW6
    buttonoutput8 = _8_ON_RAW6
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW6
    compare = 0
    ifequal = 200
    else = _1_ON_RAW6
    output = _1_ON6

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW6
    compare = 0
    ifequal = 200
    else = _2_ON_RAW6
    output = _2_ON6

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW6
    compare = 0
    ifequal = 200
    else = _3_ON_RAW6
    output = _3_ON6

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW6
    compare = 0
    ifequal = 200
    else = _4_ON_RAW6
    output = _4_ON6

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW6
    compare = 0
    ifequal = 200
    else = _5_ON_RAW6
    output = _5_ON6

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW6
    compare = 0
    ifequal = 200
    else = _6_ON_RAW6
    output = _6_ON6

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW6
    compare = 0
    ifequal = 200
    else = _7_ON_RAW6
    output = _7_ON6

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW6
    compare = 0
    ifequal = 200
    else = _8_ON_RAW6
    output = _8_ON6

# min of 1 or 2 enabled
[math]
    input1 = _1_ON6
    input2 = _2_ON6
    minimum = _12_MIN6

# min of 3 or 4 enabled
[math]
    input1 = _3_ON6
    input2 = _4_ON6
    minimum = _34_MIN6

# min of 5 or 6 enabled
[math]
    input1 = _5_ON6
    input2 = _6_ON6
    minimum = _56_MIN6

# min of 7 or 8 enabled
[math]
    input1 = _7_ON6
    input2 = _8_ON6
    minimum = _78_MIN6

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN6
    input2 = _34_MIN6
    minimum = _1234_MIN6

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN6
    input2 = _78_MIN6
    minimum = _5678_MIN6

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN6
    input2 = _5678_MIN6
    minimum = _FIRST_ENABLED6

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 1
    ifless = _2_ON6
    else = 200
    output = _2_CANDIDATE6

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 2
    ifless = _3_ON6
    else = 200
    output = _3_CANDIDATE6

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 3
    ifless = _4_ON6
    else = 200
    output = _4_CANDIDATE6

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 4
    ifless = _5_ON6
    else = 200
    output = _5_CANDIDATE6

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 5
    ifless = _6_ON6
    else = 200
    output = _6_CANDIDATE6

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 6
    ifless = _7_ON6
    else = 200
    output = _7_CANDIDATE6

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 7
    ifless = _8_ON6
    else = 200
    output = _8_CANDIDATE6

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE6
    input2 = _4_CANDIDATE6
    minimum = _34_CANDIDATE6

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE6
    input2 = _6_CANDIDATE6
    minimum = _56_CANDIDATE6

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE6
    input2 = _8_CANDIDATE6
    minimum = _78_CANDIDATE6

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE6
    input2 = _34_CANDIDATE6
    minimum = _1234_CANDIDATE6

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE6
    input2 = _78_CANDIDATE6
    minimum = _5678_CANDIDATE6

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE6
    input2 = _5678_CANDIDATE6
    minimum = _NEXT_CANDIDATE6
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE6
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED6
    else = -1 * 1 + _NEXT_CANDIDATE6
    output = _NEXT_OFFSET6

# start of bar for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_S
    input2 = _VCO_ALGOQUENCER_2_S
    input3 = _VCO_ALGOQUENCER_3_S
    input4 = _VCO_ALGOQUENCER_4_S
    input5 = _VCO_ALGOQUENCER_5_S
    input6 = _VCO_ALGOQUENCER_6_S
    input7 = _VCO_ALGOQUENCER_7_S
    input8 = _VCO_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET6
    output1 = _SAMPLE_NEXT6

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET6
    sample = _SAMPLE_NEXT6
    output = _ACTIVE_OFFSET6

# output pitch for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_P
    input2 = _VCO_ALGOQUENCER_2_P
    input3 = _VCO_ALGOQUENCER_3_P
    input4 = _VCO_ALGOQUENCER_4_P
    input5 = _VCO_ALGOQUENCER_5_P
    input6 = _VCO_ALGOQUENCER_6_P
    input7 = _VCO_ALGOQUENCER_7_P
    input8 = _VCO_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET6
    output1 = O6

# output trigger for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_T
    input2 = _VCO_ALGOQUENCER_2_T
    input3 = _VCO_ALGOQUENCER_3_T
    input4 = _VCO_ALGOQUENCER_4_T
    input5 = _VCO_ALGOQUENCER_5_T
    input6 = _VCO_ALGOQUENCER_6_T
    input7 = _VCO_ALGOQUENCER_7_T
    input8 = _VCO_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET6
    output1 = G6

# -------------------------------------------------
# chain 7
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 36
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW7
    buttonoutput2 = _2_ON_RAW7
    buttonoutput3 = _3_ON_RAW7
    buttonoutput4 = _4_ON_RAW7
    buttonoutput5 = _5_ON_RAW7
    buttonoutput6 = _6_ON_RAW7
    buttonoutput7 = _7_ON_RAW7
    buttonoutput8 = _8_ON_RAW7
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW7
    compare = 0
    ifequal = 200
    else = _1_ON_RAW7
    output = _1_ON7

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW7
    compare = 0
    ifequal = 200
    else = _2_ON_RAW7
    output = _2_ON7

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW7
    compare = 0
    ifequal = 200
    else = _3_ON_RAW7
    output = _3_ON7

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW7
    compare = 0
    ifequal = 200
    else = _4_ON_RAW7
    output = _4_ON7

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW7
    compare = 0
    ifequal = 200
    else = _5_ON_RAW7
    output = _5_ON7

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW7
    compare = 0
    ifequal = 200
    else = _6_ON_RAW7
    output = _6_ON7

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW7
    compare = 0
    ifequal = 200
    else = _7_ON_RAW7
    output = _7_ON7

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW7
    compare = 0
    ifequal = 200
    else = _8_ON_RAW7
    output = _8_ON7

# min of 1 or 2 enabled
[math]
    input1 = _1_ON7
    input2 = _2_ON7
    minimum = _12_MIN7

# min of 3 or 4 enabled
[math]
    input1 = _3_ON7
    input2 = _4_ON7
    minimum = _34_MIN7

# min of 5 or 6 enabled
[math]
    input1 = _5_ON7
    input2 = _6_ON7
    minimum = _56_MIN7

# min of 7 or 8 enabled
[math]
    input1 = _7_ON7
    input2 = _8_ON7
    minimum = _78_MIN7

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN7
    input2 = _34_MIN7
    minimum = _1234_MIN7

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN7
    input2 = _78_MIN7
    minimum = _5678_MIN7

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN7
    input2 = _5678_MIN7
    minimum = _FIRST_ENABLED7

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 1
    ifless = _2_ON7
    else = 200
    output = _2_CANDIDATE7

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 2
    ifless = _3_ON7
    else = 200
    output = _3_CANDIDATE7

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 3
    ifless = _4_ON7
    else = 200
    output = _4_CANDIDATE7

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 4
    ifless = _5_ON7
    else = 200
    output = _5_CANDIDATE7

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 5
    ifless = _6_ON7
    else = 200
    output = _6_CANDIDATE7

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 6
    ifless = _7_ON7
    else = 200
    output = _7_CANDIDATE7

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET7
    compare = 7
    ifless = _8_ON7
    else = 200
    output = _8_CANDIDATE7

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE7
    input2 = _4_CANDIDATE7
    minimum = _34_CANDIDATE7

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE7
    input2 = _6_CANDIDATE7
    minimum = _56_CANDIDATE7

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE7
    input2 = _8_CANDIDATE7
    minimum = _78_CANDIDATE7

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE7
    input2 = _34_CANDIDATE7
    minimum = _1234_CANDIDATE7

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE7
    input2 = _78_CANDIDATE7
    minimum = _5678_CANDIDATE7

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE7
    input2 = _5678_CANDIDATE7
    minimum = _NEXT_CANDIDATE7
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE7
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED7
    else = -1 * 1 + _NEXT_CANDIDATE7
    output = _NEXT_OFFSET7

# start of bar for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_S
    input2 = _VCO_ALGOQUENCER_2_S
    input3 = _VCO_ALGOQUENCER_3_S
    input4 = _VCO_ALGOQUENCER_4_S
    input5 = _VCO_ALGOQUENCER_5_S
    input6 = _VCO_ALGOQUENCER_6_S
    input7 = _VCO_ALGOQUENCER_7_S
    input8 = _VCO_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET7
    output1 = _SAMPLE_NEXT7

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET7
    sample = _SAMPLE_NEXT7
    output = _ACTIVE_OFFSET7

# output pitch for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_P
    input2 = _VCO_ALGOQUENCER_2_P
    input3 = _VCO_ALGOQUENCER_3_P
    input4 = _VCO_ALGOQUENCER_4_P
    input5 = _VCO_ALGOQUENCER_5_P
    input6 = _VCO_ALGOQUENCER_6_P
    input7 = _VCO_ALGOQUENCER_7_P
    input8 = _VCO_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET7
    output1 = O7

# output trigger for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_T
    input2 = _VCO_ALGOQUENCER_2_T
    input3 = _VCO_ALGOQUENCER_3_T
    input4 = _VCO_ALGOQUENCER_4_T
    input5 = _VCO_ALGOQUENCER_5_T
    input6 = _VCO_ALGOQUENCER_6_T
    input7 = _VCO_ALGOQUENCER_7_T
    input8 = _VCO_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET7
    output1 = G7

# -------------------------------------------------
# chain 8
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    maxactive = 8
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 38
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW8
    buttonoutput2 = _2_ON_RAW8
    buttonoutput3 = _3_ON_RAW8
    buttonoutput4 = _4_ON_RAW8
    buttonoutput5 = _5_ON_RAW8
    buttonoutput6 = _6_ON_RAW8
    buttonoutput7 = _7_ON_RAW8
    buttonoutput8 = _8_ON_RAW8
    button1 = B3.1
    button2 = B3.2
    button3 = B3.3
    button4 = B3.4
    button5 = B3.5
    button6 = B3.6
    button7 = B3.7
    button8 = B3.8
    led1 = L3.1
    led2 = L3.2
    led3 = L3.3
    led4 = L3.4
    led5 = L3.5
    led6 = L3.6
    led7 = L3.7
    led8 = L3.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW8
    compare = 0
    ifequal = 200
    else = _1_ON_RAW8
    output = _1_ON8

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW8
    compare = 0
    ifequal = 200
    else = _2_ON_RAW8
    output = _2_ON8

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW8
    compare = 0
    ifequal = 200
    else = _3_ON_RAW8
    output = _3_ON8

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW8
    compare = 0
    ifequal = 200
    else = _4_ON_RAW8
    output = _4_ON8

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW8
    compare = 0
    ifequal = 200
    else = _5_ON_RAW8
    output = _5_ON8

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW8
    compare = 0
    ifequal = 200
    else = _6_ON_RAW8
    output = _6_ON8

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW8
    compare = 0
    ifequal = 200
    else = _7_ON_RAW8
    output = _7_ON8

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW8
    compare = 0
    ifequal = 200
    else = _8_ON_RAW8
    output = _8_ON8

# min of 1 or 2 enabled
[math]
    input1 = _1_ON8
    input2 = _2_ON8
    minimum = _12_MIN8

# min of 3 or 4 enabled
[math]
    input1 = _3_ON8
    input2 = _4_ON8
    minimum = _34_MIN8

# min of 5 or 6 enabled
[math]
    input1 = _5_ON8
    input2 = _6_ON8
    minimum = _56_MIN8

# min of 7 or 8 enabled
[math]
    input1 = _7_ON8
    input2 = _8_ON8
    minimum = _78_MIN8

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN8
    input2 = _34_MIN8
    minimum = _1234_MIN8

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN8
    input2 = _78_MIN8
    minimum = _5678_MIN8

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN8
    input2 = _5678_MIN8
    minimum = _FIRST_ENABLED8

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 1
    ifless = _2_ON8
    else = 200
    output = _2_CANDIDATE8

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 2
    ifless = _3_ON8
    else = 200
    output = _3_CANDIDATE8

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 3
    ifless = _4_ON8
    else = 200
    output = _4_CANDIDATE8

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 4
    ifless = _5_ON8
    else = 200
    output = _5_CANDIDATE8

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 5
    ifless = _6_ON8
    else = 200
    output = _6_CANDIDATE8

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 6
    ifless = _7_ON8
    else = 200
    output = _7_CANDIDATE8

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET8
    compare = 7
    ifless = _8_ON8
    else = 200
    output = _8_CANDIDATE8

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE8
    input2 = _4_CANDIDATE8
    minimum = _34_CANDIDATE8

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE8
    input2 = _6_CANDIDATE8
    minimum = _56_CANDIDATE8

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE8
    input2 = _8_CANDIDATE8
    minimum = _78_CANDIDATE8

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE8
    input2 = _34_CANDIDATE8
    minimum = _1234_CANDIDATE8

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE8
    input2 = _78_CANDIDATE8
    minimum = _5678_CANDIDATE8

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1234_CANDIDATE8
    input2 = _5678_CANDIDATE8
    minimum = _NEXT_CANDIDATE8
#   _next_offset = next or looping to first sequencer in chain

[compare]
    input = _NEXT_CANDIDATE8
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED8
    else = -1 * 1 + _NEXT_CANDIDATE8
    output = _NEXT_OFFSET8

# start of bar for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_S
    input2 = _VCO_ALGOQUENCER_2_S
    input3 = _VCO_ALGOQUENCER_3_S
    input4 = _VCO_ALGOQUENCER_4_S
    input5 = _VCO_ALGOQUENCER_5_S
    input6 = _VCO_ALGOQUENCER_6_S
    input7 = _VCO_ALGOQUENCER_7_S
    input8 = _VCO_ALGOQUENCER_8_S
    offset = _ACTIVE_OFFSET8
    output1 = _SAMPLE_NEXT8

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET8
    sample = _SAMPLE_NEXT8
    output = _ACTIVE_OFFSET8

# output pitch for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_P
    input2 = _VCO_ALGOQUENCER_2_P
    input3 = _VCO_ALGOQUENCER_3_P
    input4 = _VCO_ALGOQUENCER_4_P
    input5 = _VCO_ALGOQUENCER_5_P
    input6 = _VCO_ALGOQUENCER_6_P
    input7 = _VCO_ALGOQUENCER_7_P
    input8 = _VCO_ALGOQUENCER_8_P
    offset = _ACTIVE_OFFSET8
    output1 = O8

# output trigger for the current selected subsequencer
[switch]
    input1 = _VCO_ALGOQUENCER_1_T
    input2 = _VCO_ALGOQUENCER_2_T
    input3 = _VCO_ALGOQUENCER_3_T
    input4 = _VCO_ALGOQUENCER_4_T
    input5 = _VCO_ALGOQUENCER_5_T
    input6 = _VCO_ALGOQUENCER_6_T
    input7 = _VCO_ALGOQUENCER_7_T
    input8 = _VCO_ALGOQUENCER_8_T
    offset = _ACTIVE_OFFSET8
    output1 = G8

# -------------------------------------------------
# save and load _PRESET
# -------------------------------------------------

[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 1
    minactive = 1
    preset = 0
    select = _MODE
    selectat = 80
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _PRESET

# -------------------------------------------------
# kick env
# -------------------------------------------------

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P1.1
    outputscale = 1
    notch = 0
    output = _KICK_ATTACK

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P2.1
    outputscale = 1
    notch = 0
    output = _KICK_DECAY

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P3.1
    outputscale = 1
    notch = 0
    output = _KICK_SUSTAIN

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P4.1
    outputscale = 1
    notch = 0
    output = _KICK_RELEASE

# kick env
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P1.2
    outputscale = 1
    notch = 0
    output = _KICK_VELOCITY

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P2.2
    outputscale = 1
    notch = 0
    output = _KICK_HOLD

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P3.2
    outputscale = 1
    notch = 0
    output = _KICK_SHAPE

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _KICK_PITCH

[contour]
    velocity = _KICK_VELOCITY
    level = _KICK_PITCH * 0.5
    shape = _KICK_SHAPE
    trigger = G1
    attack = _KICK_ATTACK
    hold = _KICK_HOLD
    decay = _KICK_DECAY * _KICK_DECAY
    sustain = _KICK_SUSTAIN
    release = _KICK_RELEASE
    output = O1

# kick env presets
[buttongroup]
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 41
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _KICK_ENV_PRESET

# -------------------------------------------------
# drm algo and pots 1
# -------------------------------------------------

[algoquencer]
    startofbar = _DRUM_ALGOQUENCER_1_S
    trigger = _DRUM_ALGOQUENCER_1_T
    pitch = _DRUM_ALGOQUENCER_1_P
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = _DRUM_ALGOQUENCER_1_LENGTH + 1
    pattern = 0
    select = _SELECT
    selectat = 11
    preset = _PRESET
    activity = _DRUM_ALGOQUENCER_1_ACTIVITY
    variation = _DRUM_ALGOQUENCER_1_VARIATION
    dejavu = _DRUM_ALGOQUENCER_1_DEJAVU
    morphs = _DRUM_ALGOQUENCER_1_MORPHS
    branches = _DRUM_ALGOQUENCER_1_BRANCHES
    fills = _DRUM_ALGOQUENCER_1_FILLS
    fillorder = _DRUM_ALGOQUENCER_1_FILLORDER
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[pot]
    discrete = 16
    select = _SELECT
    selectat = 11
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _DRUM_ALGOQUENCER_1_LENGTH

[pot]
    select = _SELECT
    selectat = 11
    pot = P4.1
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_ACTIVITY

[pot]
    select = _SELECT
    selectat = 11
    pot = P3.1
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_VARIATION

[pot]
    select = _SELECT
    selectat = 11
    pot = P2.1
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_DEJAVU

[pot]
    select = _SELECT
    selectat = 11
    pot = P1.1
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_MORPHS

[pot]
    select = _SELECT
    selectat = 11
    pot = P3.2
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_FILLS

[pot]
    discrete = 4
    select = _SELECT
    selectat = 11
    pot = P2.2
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_FILLORDER

[pot]
    discrete = 4
    select = _SELECT
    selectat = 11
    pot = P1.2
    outputscale = 1
    notch = 0.1
    output = _DRUM_ALGOQUENCER_1_BRANCHES
