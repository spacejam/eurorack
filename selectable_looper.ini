# -------------------------------------------------
# looping subset selection - requires patching the input _INPUT_TRIGGER_NEXT and the output _OUTPUT_ACTIVE_OFFSET and probably setting a sensible select for the buttongroup selector.
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW
    buttonoutput2 = _2_ON_RAW
    buttonoutput3 = _3_ON_RAW
    buttonoutput4 = _4_ON_RAW
    buttonoutput5 = _5_ON_RAW
    buttonoutput6 = _6_ON_RAW
    buttonoutput7 = _7_ON_RAW
    buttonoutput8 = _8_ON_RAW
    buttonoutput9 = _9_ON_RAW
    buttonoutput10 = _10_ON_RAW
    buttonoutput11 = _11_ON_RAW
    buttonoutput12 = _12_ON_RAW
    buttonoutput13 = _13_ON_RAW
    buttonoutput14 = _14_ON_RAW
    buttonoutput15 = _15_ON_RAW
    buttonoutput16 = _16_ON_RAW
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW
    compare = 0
    ifequal = 200
    else = _1_ON_RAW
    output = _1_ON

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW
    compare = 0
    ifequal = 200
    else = _2_ON_RAW
    output = _2_ON

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW
    compare = 0
    ifequal = 200
    else = _3_ON_RAW
    output = _3_ON

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW
    compare = 0
    ifequal = 200
    else = _4_ON_RAW
    output = _4_ON

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW
    compare = 0
    ifequal = 200
    else = _5_ON_RAW
    output = _5_ON

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW
    compare = 0
    ifequal = 200
    else = _6_ON_RAW
    output = _6_ON

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW
    compare = 0
    ifequal = 200
    else = _7_ON_RAW
    output = _7_ON

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW
    compare = 0
    ifequal = 200
    else = _8_ON_RAW
    output = _8_ON

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW
    compare = 0
    ifequal = 200
    else = _9_ON_RAW
    output = _9_ON

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW
    compare = 0
    ifequal = 200
    else = _10_ON_RAW
    output = _10_ON

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW
    compare = 0
    ifequal = 200
    else = _11_ON_RAW
    output = _11_ON

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW
    compare = 0
    ifequal = 200
    else = _12_ON_RAW
    output = _12_ON

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW
    compare = 0
    ifequal = 200
    else = _13_ON_RAW
    output = _13_ON

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW
    compare = 0
    ifequal = 200
    else = _14_ON_RAW
    output = _14_ON

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW
    compare = 0
    ifequal = 200
    else = _15_ON_RAW
    output = _15_ON

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW
    compare = 0
    ifequal = 200
    else = _16_ON_RAW
    output = _16_ON

# min of 1 or 2 enabled
[math]
    input1 = _1_ON
    input2 = _2_ON
    minimum = _12_MIN

# min of 3 or 4 enabled
[math]
    input1 = _3_ON
    input2 = _4_ON
    minimum = _34_MIN

# min of 5 or 6 enabled
[math]
    input1 = _5_ON
    input2 = _6_ON
    minimum = _56_MIN

# min of 7 or 8 enabled
[math]
    input1 = _7_ON
    input2 = _8_ON
    minimum = _78_MIN

# min of 9 or 10 enabled
[math]
    input1 = _9_ON
    input2 = _10_ON
    minimum = _9_10_MIN

# min of 11 or 12 enabled
[math]
    input1 = _11_ON
    input2 = _12_ON
    minimum = _11_12_MIN

# min of 13 or 15 enabled
[math]
    input1 = _13_ON
    input2 = _14_ON
    minimum = _13_14_MIN

# min of 15 or 16 enabled
[math]
    input1 = _15_ON
    input2 = _16_ON
    minimum = _15_16_MIN

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN
    input2 = _34_MIN
    minimum = _1234_MIN

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN
    input2 = _78_MIN
    minimum = _5678_MIN

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN
    input2 = _11_12_MIN
    minimum = _9_12_MIN

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN
    input2 = _15_16_MIN
    minimum = _13_16_MIN

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN
    input2 = _5678_MIN
    minimum = _1_8_MIN

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN
    input2 = _13_16_MIN
    minimum = _9_16_MIN

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN
    input2 = _9_16_MIN
    minimum = _FIRST_ENABLED

# 2 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 1
    ifless = _2_ON
    else = 200
    output = _2_CANDIDATE

# 3 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 2
    ifless = _3_ON
    else = 200
    output = _3_CANDIDATE

# 4 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 3
    ifless = _4_ON
    else = 200
    output = _4_CANDIDATE

# 5 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 4
    ifless = _5_ON
    else = 200
    output = _5_CANDIDATE

# 6 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 5
    ifless = _6_ON
    else = 200
    output = _6_CANDIDATE

# 7 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 6
    ifless = _7_ON
    else = 200
    output = _7_CANDIDATE

# 8 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 7
    ifless = _8_ON
    else = 200
    output = _8_CANDIDATE

# 9 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 8
    ifless = _9_ON
    else = 200
    output = _9_CANDIDATE

# 10 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 9
    ifless = _10_ON
    else = 200
    output = _10_CANDIDATE

# 11 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 10
    ifless = _11_ON
    else = 200
    output = _11_CANDIDATE

# 12 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 11
    ifless = _12_ON
    else = 200
    output = _12_CANDIDATE

# 13 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 12
    ifless = _13_ON
    else = 200
    output = _13_CANDIDATE

# 14 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 13
    ifless = _14_ON
    else = 200
    output = _14_CANDIDATE

# 15 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 14
    ifless = _15_ON
    else = 200
    output = _15_CANDIDATE

# 16 chain candidacy
[compare]
    input = _OUTPUT_ACTIVE_OFFSET
    compare = 15
    ifless = _16_ON
    else = 200
    output = _16_CANDIDATE

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE
    input2 = _4_CANDIDATE
    minimum = _34_CANDIDATE

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE
    input2 = _6_CANDIDATE
    minimum = _56_CANDIDATE

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE
    input2 = _8_CANDIDATE
    minimum = _78_CANDIDATE

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE
    input2 = _10_CANDIDATE
    minimum = _9_10_CANDIDATE

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE
    input2 = _12_CANDIDATE
    minimum = _11_12_CANDIDATE

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE
    input2 = _14_CANDIDATE
    minimum = _13_14_CANDIDATE

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE
    input2 = _16_CANDIDATE
    minimum = _15_16_CANDIDATE

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE
    input2 = _34_CANDIDATE
    minimum = _1234_CANDIDATE

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE
    input2 = _78_CANDIDATE
    minimum = _5678_CANDIDATE

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE
    input2 = _11_12_CANDIDATE
    minimum = _9_12_CANDIDATE

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE
    input2 = _15_16_CANDIDATE
    minimum = _13_16_CANDIDATE

[math]
    input1 = _1234_CANDIDATE
    input2 = _5678_CANDIDATE
    minimum = _1_8_CANDIDATE

[math]
    input1 = _9_12_CANDIDATE
    input2 = _13_16_CANDIDATE
    minimum = _9_16_CANDIDATE

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE
    input2 = _9_16_CANDIDATE
    minimum = _NEXT_CANDIDATE

[compare]
    input = _NEXT_CANDIDATE
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED
    else = -1 * 1 + _NEXT_CANDIDATE
    output = _NEXT_OFFSET

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET
    sample = _INPUT_TRIGGER_NEXT
    output = _OUTPUT_ACTIVE_OFFSET


