# INPUTS:
#  I1: [clock]
#  I2: [reset]
#  I3: [vca 7]
#  I4: [g. len 6]

# OUTPUTS:
#  O1: [env 1]
#  O2: [cv 2]
#  O3: [env 7]
#  O4: [smp 1]
#  O5: [pitch 5]
#  O6: [pitch 6]
#  O7: [pitch 7]
#  O8: [smp 2]

# GATES:
#  G1: [trig 1]
#  G2: [trig 2]
#  G3: [trig 3]
#  G4: [trig 4]
#  G5: [trig 5]
#  G6: [gate 6]
#  G7: [trig 7]
#  G8: [acc 2]

# CONTROLLER 1:
#  B1.1: [seq]
#  B1.2: [chain]
#  B1.3: [cv 9-16]
#  B1.4: [perf]
#  B1.6: [scale]
#  B1.7: [x-seq]
#  B1.8: [preset]

# CONTROLLER 2:
#  B2.1: [sub 1]
#  B2.2: [sub 2]
#  B2.3: [sub 3]
#  B2.4: [sub 4]
#  B2.5: [sub 5]
#  B2.6: [sub 6]
#  B2.7: [sub 7]
#  B2.8: [fn]

# CONTROLLER 3:
#  B3.1: [1]
#  B3.2: [2]
#  B3.3: [5]
#  B3.4: [6]
#  B3.5: [9]
#  B3.6: [10]
#  B3.7: [13]
#  B3.8: [14]

# CONTROLLER 4:
#  B4.1: [3]
#  B4.2: [4]
#  B4.3: [7]
#  B4.4: [8]
#  B4.5: [11]
#  B4.6: [12]
#  B4.7: [15]
#  B4.8: [16]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# intentionally left blank
# -------------------------------------------------

# -------------------------------------------------
# _SEL
# -------------------------------------------------

# _MODE
[buttongroup]
    button1 = B1.1
    button2 = B1.2
    button3 = B1.3
    button4 = B1.4
    button5 = B1.5
    button6 = B1.6
    button7 = B1.7
    button8 = B1.8
    maxactive = 1
    minactive = 1
    preset = 0
    value1 = 10
    value2 = 20
    value3 = 30
    value4 = 40
    value5 = 50
    value6 = 60
    value7 = 70
    value8 = 80
    led1 = L1.1
    led2 = L1.2
    led3 = L1.3
    led4 = L1.4
    led5 = L1.5
    led6 = L1.6
    led7 = L1.7
    led8 = L1.8
    output = _MODE

# _SUBPAGE
[buttongroup]
    output = _SUBPAGE
    button1 = B2.1
    button2 = B2.2
    button3 = B2.3
    button4 = B2.4
    button5 = B2.5
    button6 = B2.6
    button7 = B2.7
    maxactive = 1
    minactive = 0
    preset = 0
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    led1 = L2.1
    led2 = L2.2
    led3 = L2.3
    led4 = L2.4
    led5 = L2.5
    led6 = L2.6
    led7 = L2.7

# _MODE + _SUBPAGE = _SEL
[math]
    input1 = _MODE
    input2 = _SUBPAGE
    sum = _SEL

# _S_3_SEQ
[compare]
    input = _SEL
    compare = 13
    ifequal = 1
    else = 0
    output = _S_3_SEQ

# _S_3_CV_8
[compare]
    input = _SEL
    compare = 13
    ifequal = 1
    else = 0
    output = _S_3_CV_8

# _S_3_CV_16
[compare]
    input = _SEL
    compare = 33
    ifequal = 1
    else = 0
    output = _S_3_CV_16

# _S_ALGO_3
[logic]
    input1 = _S_3_CV_8
    input2 = _S_3_CV_16
    input3 = _S_3_SEQ
    or = _S_ALGO_3

# _S_4_SEQ
[compare]
    input = _SEL
    compare = 14
    ifequal = 1
    else = 0
    output = _S_4_SEQ

# _S_4_CV_8
[compare]
    input = _SEL
    compare = 14
    ifequal = 1
    else = 0
    output = _S_4_CV_8

# _S_4_CV_16
[compare]
    input = _SEL
    compare = 34
    ifequal = 1
    else = 0
    output = _S_4_CV_16

# _S_ALGO_4
[logic]
    input1 = _S_4_CV_8
    input2 = _S_4_CV_16
    input3 = _S_4_SEQ
    or = _S_ALGO_4

# _S_5_SEQ
[compare]
    input = _SEL
    compare = 15
    ifequal = 1
    else = 0
    output = _S_5_SEQ

# _S_5_CV_8
[compare]
    input = _SEL
    compare = 15
    ifequal = 1
    else = 0
    output = _S_5_CV_8

# _S_5_CV_16
[compare]
    input = _SEL
    compare = 35
    ifequal = 1
    else = 0
    output = _S_5_CV_16

# _S_ALGO_5
[logic]
    input3 = _S_5_SEQ
    input1 = _S_5_CV_8
    input2 = _S_5_CV_16
    or = _S_ALGO_5

# _S_6_SEQ
[compare]
    input = _SEL
    compare = 16
    ifequal = 1
    else = 0
    output = _S_6_SEQ

# _6_CV_8
[compare]
    input = _SEL
    compare = 16
    ifequal = 1
    else = 0
    output = _S_6_CV_8

# _S_6_CV_16
[compare]
    input = _SEL
    compare = 36
    ifequal = 1
    else = 0
    output = _S_6_CV_16

# _S_ALGO_6
[logic]
    input3 = _S_6_SEQ
    input1 = _S_6_CV_8
    input2 = _S_6_CV_16
    or = _S_ALGO_6

# _S_7_SEQ
[compare]
    input = _SEL
    compare = 17
    ifequal = 1
    else = 0
    output = _S_7_SEQ

# _S_7_CV_8
[compare]
    input = _SEL
    compare = 17
    ifequal = 1
    else = 0
    output = _S_7_CV_8

# _S_7_CV_16
[compare]
    input = _SEL
    compare = 37
    ifequal = 1
    else = 0
    output = _S_7_CV_16

# _S_7_ENV
[compare]
    input = _SEL
    compare = 57
    ifequal = 1
    else = 0
    output = _S_7_ENV

# _S_ALGO_7
[logic]
    input1 = _S_7_CV_16
    input2 = _S_7_CV_8
    input3 = _S_7_SEQ
    input4 = _S_7_ENV
    or = _S_ALGO_7

# -------------------------------------------------
# perf activities and mute buttons: MODE @ 40
# -------------------------------------------------

# mute buttons
[buttongroup]
    buttonoutput1 = _MUTE_1
    buttonoutput2 = _MUTE_2
    buttonoutput3 = _MUTE_3
    buttonoutput4 = _MUTE_4
    buttonoutput5 = _MUTE_5
    buttonoutput6 = _MUTE_6
    buttonoutput7 = _MUTE_7
    select = _MODE
    selectat = 40
    maxactive = 7
    minactive = 0
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    value1 = -1
    value2 = -1
    value3 = -1
    value4 = -1
    value5 = -1
    value6 = -1
    value7 = -1
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# 1 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P1.1
    outputscale = 1 + _MUTE_1
    notch = 0.1
    output = _1_ACTIVITY

# 2 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P2.1
    outputscale = 1 + _MUTE_2
    notch = 0.1
    output = _2_ACTIVITY

# 3 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P3.1
    outputscale = 1 + _MUTE_3
    notch = 0.1
    output = _3_ACTIVITY

# 4 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P4.1
    outputscale = 1 + _MUTE_4
    notch = 0.1
    output = _4_ACTIVITY

# 5 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P1.2
    outputscale = 1 + _MUTE_5
    notch = 0.1
    output = _5_ACTIVITY

# 6 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P2.2
    outputscale = 1 + _MUTE_6
    notch = 0.1
    output = _6_ACTIVITY

# 7 activity
[pot]
    select = _MODE
    selectat = 40
    reset = I2
    pot = P3.2
    outputscale = 1 + _MUTE_7
    notch = 0.1
    output = _7_ACTIVITY

# -------------------------------------------------
# chain 1
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 21
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW
    buttonoutput2 = _2_ON_RAW
    buttonoutput3 = _3_ON_RAW
    buttonoutput4 = _4_ON_RAW
    buttonoutput5 = _5_ON_RAW
    buttonoutput6 = _6_ON_RAW
    buttonoutput7 = _7_ON_RAW
    buttonoutput8 = _8_ON_RAW
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW
    compare = 0
    ifequal = 200
    else = _1_ON_RAW
    output = _1_ON

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW
    compare = 0
    ifequal = 200
    else = _2_ON_RAW
    output = _2_ON

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW
    compare = 0
    ifequal = 200
    else = _3_ON_RAW
    output = _3_ON

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW
    compare = 0
    ifequal = 200
    else = _4_ON_RAW
    output = _4_ON

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW
    compare = 0
    ifequal = 200
    else = _5_ON_RAW
    output = _5_ON

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW
    compare = 0
    ifequal = 200
    else = _6_ON_RAW
    output = _6_ON

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW
    compare = 0
    ifequal = 200
    else = _7_ON_RAW
    output = _7_ON

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW
    compare = 0
    ifequal = 200
    else = _8_ON_RAW
    output = _8_ON

# min of 1 or 2 enabled
[math]
    input1 = _1_ON
    input2 = _2_ON
    minimum = _12_MIN

# min of 3 or 4 enabled
[math]
    input1 = _3_ON
    input2 = _4_ON
    minimum = _34_MIN

# min of 5 or 6 enabled
[math]
    input1 = _5_ON
    input2 = _6_ON
    minimum = _56_MIN

# min of 7 or 8 enabled
[math]
    input1 = _7_ON
    input2 = _8_ON
    minimum = _78_MIN

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN
    input2 = _34_MIN
    minimum = _1234_MIN

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN
    input2 = _78_MIN
    minimum = _5678_MIN

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN
    input2 = _5678_MIN
    minimum = _FIRST_ENABLED

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 1
    ifless = _2_ON
    else = 200
    output = _2_CAN

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 2
    ifless = _3_ON
    else = 200
    output = _3_CAN

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 3
    ifless = _4_ON
    else = 200
    output = _4_CAN

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 4
    ifless = _5_ON
    else = 200
    output = _5_CAN

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 5
    ifless = _6_ON
    else = 200
    output = _6_CAN

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 6
    ifless = _7_ON
    else = 200
    output = _7_CAN

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE
    compare = 7
    ifless = _8_ON
    else = 200
    output = _8_CAN

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN
    input2 = _4_CAN
    minimum = _34_CAN

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN
    input2 = _6_CAN
    minimum = _56_CAN

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN
    input2 = _8_CAN
    minimum = _78_CAN

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN
    input2 = _34_CAN
    minimum = _1234_CAN

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN
    input2 = _78_CAN
    minimum = _5678_CAN

# minimum next sequencer candidate or 200 if none -> _NXT_CAN
[math]
    input1 = _1234_CAN
    input2 = _5678_CAN
    minimum = _NXT_CAN

[compare]
    input = _NXT_CAN
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED
    else = -1 * 1 + _NXT_CAN
    output = _NXT_PRE

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE
    sample = _1_STARTOFBAR
    output = _ACTIVE_PRE

# -------------------------------------------------
# kick algo and pots 1
# -------------------------------------------------

# kick max pitch
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P1.1
    outputscale = 1
    notch = 0
    output = _KICK_CV_MAX

# kick min pitch
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P1.2
    outputscale = 0.5
    notch = 0
    output = _KICK_CV_MIN

# kick hold
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P2.1
    outputscale = 1
    notch = 0
    output = _KICK_HOLD

# kick shape
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P3.1
    outputscale = 1
    notch = 0
    output = _KICK_SHAPE

# kick release
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P4.1
    outputscale = 1
    notch = 0
    output = _KICK_RELEASE

# kick lfo amount
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P2.2
    outputscale = 1
    notch = 0
    output = _KICK_LFO_AMOUNT

# kick lfo rate
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P3.2
    outputscale = 1
    notch = 0
    output = _KICK_LFO_RATE

# kick lfo offset
[pot]
    preset = _PRE
    select = _SEL
    selectat = 11
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _KICK_LFO_OFFSET

# 1: kick
[algoquencer]
    startofbar = _1_STARTOFBAR
    trigger = G1
    clock = I1
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    pattern = 0
    select = _SEL
    selectat = 11
    preset = _ACTIVE_PRE
    activity = _1_ACTIVITY
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# kick pitch envelope out
[contour]
    level = _KICK_CV_MAX * 0.6
    shape = _KICK_SHAPE
    trigger = G1
    attack = 0
    hold = _KICK_HOLD
    startfromzero = 1
    release = _KICK_RELEASE
    output = _KICK_ENV

[lfo]
    output = _KICK_LFO
    waveform = 4
    sync = G1
    syncphase = _KICK_LFO_OFFSET
    rate = _KICK_LFO_RATE
    level = _KICK_LFO_AMOUNT * 0.2
    bipolar = 1

[copy]
    input = _KICK_ENV + _KICK_LFO
    output = _KICK_PITCH_MOD

[copy]
    input = _KICK_PITCH_MOD + _KICK_CV_MIN
    output = O1

# -------------------------------------------------
# fracture algo and pots 2
# -------------------------------------------------

# length
[button]
    states = 3
    value1 = 0
    value2 = 1
    value3 = 2
    select = _SEL
    selectat = 12
    startvalue = 0
    button = B2.8
    onvalue = 1
    offvalue = 0
    led = L2.8
    output = _2_FN

# 2 len and accent
[switch]
    input1 = 1
    offset = _2_FN
    output1 = R24
    output2 = _2_LEN_FN
    output3 = _2_ACC_FN

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P1.1
    outputscale = 0.6
    output = _2_CV_1

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P2.1
    outputscale = 0.6
    output = _2_CV_2

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P3.1
    outputscale = 0.6
    output = _2_CV_3

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P4.1
    outputscale = 0.6
    output = _2_CV_4

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P1.2
    outputscale = 0.6
    output = _2_CV_5

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P2.2
    outputscale = 0.6
    output = _2_CV_6

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P3.2
    outputscale = 0.6
    output = _2_CV_7

# pitch pot
[pot]
    preset = _PRE
    select = _SEL
    selectat = 12
    pot = P4.2
    outputscale = 0.6
    output = _2_CV_8

# 2: simple percussion
[algoquencer]
    accentbutton = _2_ACC_FN
    activity = _2_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = I1
    length = 16
    lengthbutton = _2_LEN_FN
    pattern = 0
    pitch1 = _2_CV_1
    pitch2 = _2_CV_2
    pitch3 = _2_CV_3
    pitch4 = _2_CV_4
    pitch5 = _2_CV_5
    pitch6 = _2_CV_6
    pitch7 = _2_CV_7
    pitch8 = _2_CV_8
    preset = _PRE
    reset = I2
    select = _SEL
    selectat = 12
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = O2
    trigger = G2
    accent = G8

# -------------------------------------------------
# chain 3
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 23
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW3
    buttonoutput2 = _2_ON_RAW3
    buttonoutput3 = _3_ON_RAW3
    buttonoutput4 = _4_ON_RAW3
    buttonoutput5 = _5_ON_RAW3
    buttonoutput6 = _6_ON_RAW3
    buttonoutput7 = _7_ON_RAW3
    buttonoutput8 = _8_ON_RAW3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW3
    compare = 0
    ifequal = 200
    else = _1_ON_RAW3
    output = _1_ON3

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW3
    compare = 0
    ifequal = 200
    else = _2_ON_RAW3
    output = _2_ON3

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW3
    compare = 0
    ifequal = 200
    else = _3_ON_RAW3
    output = _3_ON3

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW3
    compare = 0
    ifequal = 200
    else = _4_ON_RAW3
    output = _4_ON3

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW3
    compare = 0
    ifequal = 200
    else = _5_ON_RAW3
    output = _5_ON3

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW3
    compare = 0
    ifequal = 200
    else = _6_ON_RAW3
    output = _6_ON3

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW3
    compare = 0
    ifequal = 200
    else = _7_ON_RAW3
    output = _7_ON3

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW3
    compare = 0
    ifequal = 200
    else = _8_ON_RAW3
    output = _8_ON3

# min of 1 or 2 enabled
[math]
    input1 = _1_ON3
    input2 = _2_ON3
    minimum = _12_MIN3

# min of 3 or 4 enabled
[math]
    input1 = _3_ON3
    input2 = _4_ON3
    minimum = _34_MIN3

# min of 5 or 6 enabled
[math]
    input1 = _5_ON3
    input2 = _6_ON3
    minimum = _56_MIN3

# min of 7 or 8 enabled
[math]
    input1 = _7_ON3
    input2 = _8_ON3
    minimum = _78_MIN3

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN3
    input2 = _34_MIN3
    minimum = _1234_MIN3

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN3
    input2 = _78_MIN3
    minimum = _5678_MIN3

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN3
    input2 = _5678_MIN3
    minimum = _FIRST_ENABLED3

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 1
    ifless = _2_ON3
    else = 200
    output = _2_CAN3

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 2
    ifless = _3_ON3
    else = 200
    output = _3_CAN3

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 3
    ifless = _4_ON3
    else = 200
    output = _4_CAN3

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 4
    ifless = _5_ON3
    else = 200
    output = _5_CAN3

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 5
    ifless = _6_ON3
    else = 200
    output = _6_CAN3

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 6
    ifless = _7_ON3
    else = 200
    output = _7_CAN3

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE_3
    compare = 7
    ifless = _8_ON3
    else = 200
    output = _8_CAN3

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN3
    input2 = _4_CAN3
    minimum = _34_CAN3

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN3
    input2 = _6_CAN3
    minimum = _56_CAN3

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN3
    input2 = _8_CAN3
    minimum = _78_CAN3

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN3
    input2 = _34_CAN3
    minimum = _1234_CAN3

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN3
    input2 = _78_CAN3
    minimum = _5678_CAN3

# minimum next sequencer candidate or 200 if none -> _NXT_CAN
[math]
    input1 = _1234_CAN3
    input2 = _5678_CAN3
    minimum = _NXT_CAN3

[compare]
    input = _NXT_CAN3
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED3
    else = -1 * 1 + _NXT_CAN3
    output = _NXT_PRE_3

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE_3
    sample = _SMP_NXT_3
    output = _ACTIVE_PRE_3

# -------------------------------------------------
# pitch pots 3
# -------------------------------------------------

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.5
    output = _3_CV_1

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.5
    output = _3_CV_2

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.5
    output = _3_CV_3

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.5
    output = _3_CV_4

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.5
    output = _3_CV_5

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.5
    output = _3_CV_6

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.5
    output = _3_CV_7

# pitch pot
[pot]
    select = _S_3_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.5
    output = _3_CV_8

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.5
    output = _3_CV_9

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.5
    output = _3_CV_10

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.5
    output = _3_CV_11

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.5
    output = _3_CV_12

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.5
    output = _3_CV_13

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.5
    output = _3_CV_14

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.5
    output = _3_CV_15

# pitch pot
[pot]
    select = _S_3_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.5
    output = _3_CV_16

# -------------------------------------------------
# algo and pots 3
# -------------------------------------------------

# length
[button]
    doubleclickmode = 1
    select = _S_ALGO_3
    startvalue = 0
    button = B2.8
    onvalue = 1
    offvalue = 0
    led = L2.8
    output = _3_LEN_FN

[algoquencer]
    pitch1 = _3_CV_1
    pitch2 = _3_CV_2
    pitch3 = _3_CV_3
    pitch4 = _3_CV_4
    pitch5 = _3_CV_5
    pitch6 = _3_CV_6
    pitch7 = _3_CV_7
    pitch8 = _3_CV_8
    pitch9 = _3_CV_9
    pitch10 = _3_CV_10
    pitch11 = _3_CV_11
    pitch12 = _3_CV_12
    pitch13 = _3_CV_13
    pitch14 = _3_CV_14
    pitch15 = _3_CV_15
    pitch16 = _3_CV_16
    activity = _3_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = I1
    lengthbutton = _3_LEN_FN
    morphs = 0
    preset = _ACTIVE_PRE_3
    reset = I2
    select = _S_ALGO_3
    variation = 0
    trigger = G3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = O4
    startofbar = _SMP_NXT_3

# -------------------------------------------------
# chain 4
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 24
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    buttonoutput1 = _1_ON_RAW4
    buttonoutput2 = _2_ON_RAW4
    buttonoutput3 = _3_ON_RAW4
    buttonoutput4 = _4_ON_RAW4
    buttonoutput5 = _5_ON_RAW4
    buttonoutput6 = _6_ON_RAW4
    buttonoutput7 = _7_ON_RAW4
    buttonoutput8 = _8_ON_RAW4
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW4
    compare = 0
    ifequal = 200
    else = _1_ON_RAW4
    output = _1_ON4

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW4
    compare = 0
    ifequal = 200
    else = _2_ON_RAW4
    output = _2_ON4

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW4
    compare = 0
    ifequal = 200
    else = _3_ON_RAW4
    output = _3_ON4

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW4
    compare = 0
    ifequal = 200
    else = _4_ON_RAW4
    output = _4_ON4

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW4
    compare = 0
    ifequal = 200
    else = _5_ON_RAW4
    output = _5_ON4

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW4
    compare = 0
    ifequal = 200
    else = _6_ON_RAW4
    output = _6_ON4

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW4
    compare = 0
    ifequal = 200
    else = _7_ON_RAW4
    output = _7_ON4

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW4
    compare = 0
    ifequal = 200
    else = _8_ON_RAW4
    output = _8_ON4

# min of 1 or 2 enabled
[math]
    input1 = _1_ON4
    input2 = _2_ON4
    minimum = _12_MIN4

# min of 3 or 4 enabled
[math]
    input1 = _3_ON4
    input2 = _4_ON4
    minimum = _34_MIN4

# min of 5 or 6 enabled
[math]
    input1 = _5_ON4
    input2 = _6_ON4
    minimum = _56_MIN4

# min of 7 or 8 enabled
[math]
    input1 = _7_ON4
    input2 = _8_ON4
    minimum = _78_MIN4

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN4
    input2 = _34_MIN4
    minimum = _1234_MIN4

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN4
    input2 = _78_MIN4
    minimum = _5678_MIN4

# min of 1234 or 5678 enabled -> _FIRST_ENABLED
[math]
    input1 = _1234_MIN4
    input2 = _5678_MIN4
    minimum = _FIRST_ENABLED4

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 1
    ifless = _2_ON4
    else = 200
    output = _2_CAN4

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 2
    ifless = _3_ON4
    else = 200
    output = _3_CAN4

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 3
    ifless = _4_ON4
    else = 200
    output = _4_CAN4

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 4
    ifless = _5_ON4
    else = 200
    output = _5_CAN4

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 5
    ifless = _6_ON4
    else = 200
    output = _6_CAN4

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 6
    ifless = _7_ON4
    else = 200
    output = _7_CAN4

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE_4
    compare = 7
    ifless = _8_ON4
    else = 200
    output = _8_CAN4

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN4
    input2 = _4_CAN4
    minimum = _34_CAN4

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN4
    input2 = _6_CAN4
    minimum = _56_CAN4

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN4
    input2 = _8_CAN4
    minimum = _78_CAN4

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN4
    input2 = _34_CAN4
    minimum = _1234_CAN4

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN4
    input2 = _78_CAN4
    minimum = _5678_CAN4

[math]
    input1 = _1234_CAN4
    input2 = _5678_CAN4
    minimum = _NXT_CAN4

[compare]
    input = _NXT_CAN4
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED4
    else = -1 * 1 + _NXT_CAN4
    output = _NXT_PRE_4

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE_4
    sample = _SMP_NXT_4
    output = _ACTIVE_PRE_4

# -------------------------------------------------
# pitch pots 4
# -------------------------------------------------

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.5
    output = _4_CV_1

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.5
    output = _4_CV_2

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.5
    output = _4_CV_3

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.5
    output = _4_CV_4

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.5
    output = _4_CV_5

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.5
    output = _4_CV_6

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.5
    output = _4_CV_7

# pitch pot
[pot]
    select = _S_4_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.5
    output = _4_CV_8

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.5
    output = _4_CV_9

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.5
    output = _4_CV_10

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.5
    output = _4_CV_11

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.5
    output = _4_CV_12

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.5
    output = _4_CV_13

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.5
    output = _4_CV_14

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.5
    output = _4_CV_15

# pitch pot
[pot]
    select = _S_4_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.5
    output = _4_CV_16

# -------------------------------------------------
# algo and pots 4
# -------------------------------------------------

# length
[button]
    select = _S_ALGO_4
    doubleclickmode = 1
    startvalue = 0
    button = B2.8
    onvalue = 1
    offvalue = 0
    led = L2.8
    output = _4_LEN_FN

[algoquencer]
    pitch1 = _4_CV_1
    pitch2 = _4_CV_2
    pitch3 = _4_CV_3
    pitch4 = _4_CV_4
    pitch5 = _4_CV_5
    pitch6 = _4_CV_6
    pitch7 = _4_CV_7
    pitch8 = _4_CV_8
    pitch9 = _4_CV_9
    pitch10 = _4_CV_10
    pitch11 = _4_CV_11
    pitch12 = _4_CV_12
    pitch13 = _4_CV_13
    pitch14 = _4_CV_14
    pitch15 = _4_CV_15
    pitch16 = _4_CV_16
    activity = _4_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = I1
    lengthbutton = _4_LEN_FN
    morphs = 0
    preset = _ACTIVE_PRE_4
    reset = I2
    select = _S_ALGO_4
    variation = 0
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = O8
    startofbar = _SMP_NXT_4
    trigger = G4

# -------------------------------------------------
# chain 5
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 25
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW5
    buttonoutput2 = _2_ON_RAW5
    buttonoutput3 = _3_ON_RAW5
    buttonoutput4 = _4_ON_RAW5
    buttonoutput5 = _5_ON_RAW5
    buttonoutput6 = _6_ON_RAW5
    buttonoutput7 = _7_ON_RAW5
    buttonoutput8 = _8_ON_RAW5
    buttonoutput9 = _9_ON_RAW5
    buttonoutput10 = _10_ON_RAW5
    buttonoutput11 = _11_ON_RAW5
    buttonoutput12 = _12_ON_RAW5
    buttonoutput13 = _13_ON_RAW5
    buttonoutput14 = _14_ON_RAW5
    buttonoutput15 = _15_ON_RAW5
    buttonoutput16 = _16_ON_RAW5
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW5
    compare = 0
    ifequal = 200
    else = _1_ON_RAW5
    output = _1_ON5

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW5
    compare = 0
    ifequal = 200
    else = _2_ON_RAW5
    output = _2_ON5

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW5
    compare = 0
    ifequal = 200
    else = _3_ON_RAW5
    output = _3_ON5

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW5
    compare = 0
    ifequal = 200
    else = _4_ON_RAW5
    output = _4_ON5

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW5
    compare = 0
    ifequal = 200
    else = _5_ON_RAW5
    output = _5_ON5

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW5
    compare = 0
    ifequal = 200
    else = _6_ON_RAW5
    output = _6_ON5

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW5
    compare = 0
    ifequal = 200
    else = _7_ON_RAW5
    output = _7_ON5

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW5
    compare = 0
    ifequal = 200
    else = _8_ON_RAW5
    output = _8_ON5

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW5
    compare = 0
    ifequal = 200
    else = _9_ON_RAW5
    output = _9_ON5

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW5
    compare = 0
    ifequal = 200
    else = _10_ON_RAW5
    output = _10_ON5

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW5
    compare = 0
    ifequal = 200
    else = _11_ON_RAW5
    output = _11_ON5

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW5
    compare = 0
    ifequal = 200
    else = _12_ON_RAW5
    output = _12_ON5

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW5
    compare = 0
    ifequal = 200
    else = _13_ON_RAW5
    output = _13_ON5

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW5
    compare = 0
    ifequal = 200
    else = _14_ON_RAW5
    output = _14_ON5

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW5
    compare = 0
    ifequal = 200
    else = _15_ON_RAW5
    output = _15_ON5

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW5
    compare = 0
    ifequal = 200
    else = _16_ON_RAW5
    output = _16_ON5

# min of 1 or 2 enabled
[math]
    input1 = _1_ON5
    input2 = _2_ON5
    minimum = _12_MIN5

# min of 3 or 4 enabled
[math]
    input1 = _3_ON5
    input2 = _4_ON5
    minimum = _34_MIN5

# min of 5 or 6 enabled
[math]
    input1 = _5_ON5
    input2 = _6_ON5
    minimum = _56_MIN5

# min of 7 or 8 enabled
[math]
    input1 = _7_ON5
    input2 = _8_ON5
    minimum = _78_MIN5

# min of 9 or 10 enabled
[math]
    input1 = _9_ON5
    input2 = _10_ON5
    minimum = _9_10_MIN5

# min of 11 or 12 enabled
[math]
    input1 = _11_ON5
    input2 = _12_ON5
    minimum = _11_12_MIN5

# min of 13 or 15 enabled
[math]
    input1 = _13_ON5
    input2 = _14_ON5
    minimum = _13_14_MIN5

# min of 15 or 16 enabled
[math]
    input1 = _15_ON5
    input2 = _16_ON5
    minimum = _15_16_MIN5

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN5
    input2 = _34_MIN5
    minimum = _1234_MIN5

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN5
    input2 = _78_MIN5
    minimum = _5678_MIN5

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN5
    input2 = _11_12_MIN5
    minimum = _9_12_MIN5

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN5
    input2 = _15_16_MIN5
    minimum = _13_16_MIN5

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN5
    input2 = _5678_MIN5
    minimum = _1_8_MIN5

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN5
    input2 = _13_16_MIN5
    minimum = _9_16_MIN5

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN5
    input2 = _9_16_MIN5
    minimum = _FIRST_ENABLED5

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 1
    ifless = _2_ON5
    else = 200
    output = _2_CAN5

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 2
    ifless = _3_ON5
    else = 200
    output = _3_CAN5

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 3
    ifless = _4_ON5
    else = 200
    output = _4_CAN5

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 4
    ifless = _5_ON5
    else = 200
    output = _5_CAN5

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 5
    ifless = _6_ON5
    else = 200
    output = _6_CAN5

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 6
    ifless = _7_ON5
    else = 200
    output = _7_CAN5

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 7
    ifless = _8_ON5
    else = 200
    output = _8_CAN5

# 9 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 8
    ifless = _9_ON5
    else = 200
    output = _9_CAN5

# 10 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 9
    ifless = _10_ON5
    else = 200
    output = _10_CAN5

# 11 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 10
    ifless = _11_ON5
    else = 200
    output = _11_CAN5

# 12 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 11
    ifless = _12_ON5
    else = 200
    output = _12_CAN5

# 13 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 12
    ifless = _13_ON5
    else = 200
    output = _13_CAN5

# 14 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 13
    ifless = _14_ON5
    else = 200
    output = _14_CAN5

# 15 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 14
    ifless = _15_ON5
    else = 200
    output = _15_CAN5

# 16 chain candidacy
[compare]
    input = _ACTIVE_PRE_5
    compare = 15
    ifless = _16_ON5
    else = 200
    output = _16_CAN5

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN5
    input2 = _4_CAN5
    minimum = _34_CAN5

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN5
    input2 = _6_CAN5
    minimum = _56_CAN5

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN5
    input2 = _8_CAN5
    minimum = _78_CAN5

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CAN5
    input2 = _10_CAN5
    minimum = _9_10_CAN5

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CAN5
    input2 = _12_CAN5
    minimum = _11_12_CAN5

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CAN5
    input2 = _14_CAN5
    minimum = _13_14_CAN5

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CAN5
    input2 = _16_CAN5
    minimum = _15_16_CAN5

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN5
    input2 = _34_CAN5
    minimum = _1234_CAN5

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN5
    input2 = _78_CAN5
    minimum = _5678_CAN5

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CAN5
    input2 = _11_12_CAN5
    minimum = _9_12_CAN5

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CAN5
    input2 = _15_16_CAN5
    minimum = _13_16_CAN5

[math]
    input1 = _1234_CAN5
    input2 = _5678_CAN5
    minimum = _1_8_CAN5

[math]
    input1 = _9_12_CAN5
    input2 = _13_16_CAN5
    minimum = _9_16_CAN5

# minimum next sequencer candidate or 200 if none -> _NXT_CAN
[math]
    input1 = _1_8_CAN5
    input2 = _9_16_CAN5
    minimum = _NXT_CAN5

[compare]
    input = _NXT_CAN5
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED5
    else = -1 * 1 + _NXT_CAN5
    output = _NXT_PRE_5

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE_5
    sample = _SMP_NXT_5
    output = _ACTIVE_PRE_5

# -------------------------------------------------
# pitch pots 5
# -------------------------------------------------

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.6
    output = _5_CV_1

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.6
    output = _5_CV_2

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.6
    output = _5_CV_3

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.6
    output = _5_CV_4

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.6
    output = _5_CV_5

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.6
    output = _5_CV_6

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.6
    output = _5_CV_7

# pitch pot
[pot]
    select = _S_5_CV_8
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.6
    output = _5_CV_8

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.1
    outputscale = 0.6
    output = _5_CV_9

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.1
    outputscale = 0.6
    output = _5_CV_10

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.1
    outputscale = 0.6
    output = _5_CV_11

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.1
    outputscale = 0.6
    output = _5_CV_12

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P1.2
    outputscale = 0.6
    output = _5_CV_13

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P2.2
    outputscale = 0.6
    output = _5_CV_14

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P3.2
    outputscale = 0.6
    output = _5_CV_15

# pitch pot
[pot]
    select = _S_5_CV_16
    preset = _ACTIVE_PRE_5
    pot = P4.2
    outputscale = 0.6
    output = _5_CV_16

# -------------------------------------------------
# vco algo and pots 5
# -------------------------------------------------

# length
[button]
    doubleclickmode = 1
    select = _S_ALGO_5
    startvalue = 0
    button = B2.8
    onvalue = 1
    offvalue = 0
    led = L2.8
    output = _5_LEN_FN

[algoquencer]
    pitch1 = _5_CV_1
    pitch2 = _5_CV_2
    pitch3 = _5_CV_3
    pitch4 = _5_CV_4
    pitch5 = _5_CV_5
    pitch6 = _5_CV_6
    pitch7 = _5_CV_7
    pitch8 = _5_CV_8
    pitch9 = _5_CV_9
    pitch10 = _5_CV_10
    pitch11 = _5_CV_11
    pitch12 = _5_CV_12
    pitch13 = _5_CV_13
    pitch14 = _5_CV_14
    pitch15 = _5_CV_15
    pitch16 = _5_CV_16
    activity = _5_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = _5_CLOCK
    lengthbutton = _5_LEN_FN
    morphs = 0
    preset = _ACTIVE_PRE_5
    reset = I2
    select = _S_ALGO_5
    variation = 0
    trigger = G5
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _5_CV
    startofbar = _SMP_NXT_5

# -------------------------------------------------
# chain 6
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 26
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW6
    buttonoutput2 = _2_ON_RAW6
    buttonoutput3 = _3_ON_RAW6
    buttonoutput4 = _4_ON_RAW6
    buttonoutput5 = _5_ON_RAW6
    buttonoutput6 = _6_ON_RAW6
    buttonoutput7 = _7_ON_RAW6
    buttonoutput8 = _8_ON_RAW6
    buttonoutput9 = _9_ON_RAW6
    buttonoutput10 = _10_ON_RAW6
    buttonoutput11 = _11_ON_RAW6
    buttonoutput12 = _12_ON_RAW6
    buttonoutput13 = _13_ON_RAW6
    buttonoutput14 = _14_ON_RAW6
    buttonoutput15 = _15_ON_RAW6
    buttonoutput16 = _16_ON_RAW6
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW6
    compare = 0
    ifequal = 200
    else = _1_ON_RAW6
    output = _1_ON6

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW6
    compare = 0
    ifequal = 200
    else = _2_ON_RAW6
    output = _2_ON6

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW6
    compare = 0
    ifequal = 200
    else = _3_ON_RAW6
    output = _3_ON6

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW6
    compare = 0
    ifequal = 200
    else = _4_ON_RAW6
    output = _4_ON6

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW6
    compare = 0
    ifequal = 200
    else = _5_ON_RAW6
    output = _5_ON6

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW6
    compare = 0
    ifequal = 200
    else = _6_ON_RAW6
    output = _6_ON6

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW6
    compare = 0
    ifequal = 200
    else = _7_ON_RAW6
    output = _7_ON6

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW6
    compare = 0
    ifequal = 200
    else = _8_ON_RAW6
    output = _8_ON6

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW6
    compare = 0
    ifequal = 200
    else = _9_ON_RAW6
    output = _9_ON6

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW6
    compare = 0
    ifequal = 200
    else = _10_ON_RAW6
    output = _10_ON6

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW6
    compare = 0
    ifequal = 200
    else = _11_ON_RAW6
    output = _11_ON6

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW6
    compare = 0
    ifequal = 200
    else = _12_ON_RAW6
    output = _12_ON6

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW6
    compare = 0
    ifequal = 200
    else = _13_ON_RAW6
    output = _13_ON6

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW6
    compare = 0
    ifequal = 200
    else = _14_ON_RAW6
    output = _14_ON6

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW6
    compare = 0
    ifequal = 200
    else = _15_ON_RAW6
    output = _15_ON6

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW6
    compare = 0
    ifequal = 200
    else = _16_ON_RAW6
    output = _16_ON6

# min of 1 or 2 enabled
[math]
    input1 = _1_ON6
    input2 = _2_ON6
    minimum = _12_MIN6

# min of 3 or 4 enabled
[math]
    input1 = _3_ON6
    input2 = _4_ON6
    minimum = _34_MIN6

# min of 5 or 6 enabled
[math]
    input1 = _5_ON6
    input2 = _6_ON6
    minimum = _56_MIN6

# min of 7 or 8 enabled
[math]
    input1 = _7_ON6
    input2 = _8_ON6
    minimum = _78_MIN6

# min of 9 or 10 enabled
[math]
    input1 = _9_ON6
    input2 = _10_ON6
    minimum = _9_10_MIN6

# min of 11 or 12 enabled
[math]
    input1 = _11_ON6
    input2 = _12_ON6
    minimum = _11_12_MIN6

# min of 13 or 15 enabled
[math]
    input1 = _13_ON6
    input2 = _14_ON6
    minimum = _13_14_MIN6

# min of 15 or 16 enabled
[math]
    input1 = _15_ON6
    input2 = _16_ON6
    minimum = _15_16_MIN6

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN6
    input2 = _34_MIN6
    minimum = _1234_MIN6

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN6
    input2 = _78_MIN6
    minimum = _5678_MIN6

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN6
    input2 = _11_12_MIN6
    minimum = _9_12_MIN6

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN6
    input2 = _15_16_MIN6
    minimum = _13_16_MIN6

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN6
    input2 = _5678_MIN6
    minimum = _1_8_MIN6

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN6
    input2 = _13_16_MIN6
    minimum = _9_16_MIN6

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN6
    input2 = _9_16_MIN6
    minimum = _FIRST_ENABLED6

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 1
    ifless = _2_ON6
    else = 200
    output = _2_CAN6

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 2
    ifless = _3_ON6
    else = 200
    output = _3_CAN6

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 3
    ifless = _4_ON6
    else = 200
    output = _4_CAN6

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 4
    ifless = _5_ON6
    else = 200
    output = _5_CAN6

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 5
    ifless = _6_ON6
    else = 200
    output = _6_CAN6

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 6
    ifless = _7_ON6
    else = 200
    output = _7_CAN6

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 7
    ifless = _8_ON6
    else = 200
    output = _8_CAN6

# 9 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 8
    ifless = _9_ON6
    else = 200
    output = _9_CAN6

# 10 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 9
    ifless = _10_ON6
    else = 200
    output = _10_CAN6

# 11 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 10
    ifless = _11_ON6
    else = 200
    output = _11_CAN6

# 12 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 11
    ifless = _12_ON6
    else = 200
    output = _12_CAN6

# 13 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 12
    ifless = _13_ON6
    else = 200
    output = _13_CAN6

# 14 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 13
    ifless = _14_ON6
    else = 200
    output = _14_CAN6

# 15 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 14
    ifless = _15_ON6
    else = 200
    output = _15_CAN6

# 16 chain candidacy
[compare]
    input = _ACTIVE_PRE_6
    compare = 15
    ifless = _16_ON6
    else = 200
    output = _16_CAN6

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN6
    input2 = _4_CAN6
    minimum = _34_CAN6

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN6
    input2 = _6_CAN6
    minimum = _56_CAN6

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN6
    input2 = _8_CAN6
    minimum = _78_CAN6

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CAN6
    input2 = _10_CAN6
    minimum = _9_10_CAN6

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CAN6
    input2 = _12_CAN6
    minimum = _11_12_CAN6

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CAN6
    input2 = _14_CAN6
    minimum = _13_14_CAN6

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CAN6
    input2 = _16_CAN6
    minimum = _15_16_CAN6

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN6
    input2 = _34_CAN6
    minimum = _1234_CAN6

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN6
    input2 = _78_CAN6
    minimum = _5678_CAN6

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CAN6
    input2 = _11_12_CAN6
    minimum = _9_12_CAN6

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CAN6
    input2 = _15_16_CAN6
    minimum = _13_16_CAN6

[math]
    input1 = _1234_CAN6
    input2 = _5678_CAN6
    minimum = _1_8_CAN6

[math]
    input1 = _9_12_CAN6
    input2 = _13_16_CAN6
    minimum = _9_16_CAN6

# minimum next sequencer candidate or 200 if none -> _NXT_CAN
[math]
    input1 = _1_8_CAN6
    input2 = _9_16_CAN6
    minimum = _NXT_CAN6

[compare]
    input = _NXT_CAN6
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED6
    else = -1 * 1 + _NXT_CAN6
    output = _NXT_PRE_6

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE_6
    sample = _SMP_NXT_6
    output = _ACTIVE_PRE_6

# -------------------------------------------------
# vco algo and pots 6
# -------------------------------------------------

# length
[button]
    doubleclickmode = 1
    select = _S_ALGO_6
    button = B2.8
    startvalue = 0
    onvalue = 1
    offvalue = 0
    led = L2.8
    output = _6_LEN_FN

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P1.1
    outputscale = 0.6
    output = _6_CV_1

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P2.1
    outputscale = 0.6
    output = _6_CV_2

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P3.1
    outputscale = 0.6
    output = _6_CV_3

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P4.1
    outputscale = 0.6
    output = _6_CV_4

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P1.2
    outputscale = 0.6
    output = _6_CV_5

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P2.2
    outputscale = 0.6
    output = _6_CV_6

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P3.2
    outputscale = 0.6
    output = _6_CV_7

# pitch pot
[pot]
    select = _S_6_CV_8
    preset = _ACTIVE_PRE_6
    pot = P4.2
    outputscale = 0.6
    output = _6_CV_8

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P1.1
    outputscale = 0.6
    output = _6_CV_9

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P2.1
    outputscale = 0.6
    output = _6_CV_10

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P3.1
    outputscale = 0.6
    output = _6_CV_11

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P4.1
    outputscale = 0.6
    output = _6_CV_12

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P1.2
    outputscale = 0.6
    output = _6_CV_13

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P2.2
    outputscale = 0.6
    output = _6_CV_14

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P3.2
    outputscale = 0.6
    output = _6_CV_15

# pitch pot
[pot]
    select = _S_6_CV_16
    preset = _ACTIVE_PRE_6
    pot = P4.2
    outputscale = 0.6
    output = _6_CV_16

[algoquencer]
    activity = _6_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = _6_CLOCK
    lengthbutton = _6_LEN_FN
    pattern = 0
    pitch1 = _6_CV_1
    pitch2 = _6_CV_2
    pitch3 = _6_CV_3
    pitch4 = _6_CV_4
    pitch5 = _6_CV_5
    pitch6 = _6_CV_6
    pitch7 = _6_CV_7
    pitch8 = _6_CV_8
    pitch9 = _6_CV_9
    pitch10 = _6_CV_10
    pitch11 = _6_CV_11
    pitch12 = _6_CV_12
    pitch13 = _6_CV_13
    pitch14 = _6_CV_14
    pitch15 = _6_CV_15
    pitch16 = _6_CV_16
    preset = _ACTIVE_PRE_6
    reset = I2
    select = _S_ALGO_6
    gatelength = I4 + 0.1
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _6_CV
    startofbar = _SMP_NXT_6
    gate = G6

# -------------------------------------------------
# chain 7
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRE
    select = _SEL
    selectat = 27
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW7
    buttonoutput2 = _2_ON_RAW7
    buttonoutput3 = _3_ON_RAW7
    buttonoutput4 = _4_ON_RAW7
    buttonoutput5 = _5_ON_RAW7
    buttonoutput6 = _6_ON_RAW7
    buttonoutput7 = _7_ON_RAW7
    buttonoutput8 = _8_ON_RAW7
    buttonoutput9 = _9_ON_RAW7
    buttonoutput10 = _10_ON_RAW7
    buttonoutput11 = _11_ON_RAW7
    buttonoutput12 = _12_ON_RAW7
    buttonoutput13 = _13_ON_RAW7
    buttonoutput14 = _14_ON_RAW7
    buttonoutput15 = _15_ON_RAW7
    buttonoutput16 = _16_ON_RAW7
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW7
    compare = 0
    ifequal = 200
    else = _1_ON_RAW7
    output = _1_ON7

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW7
    compare = 0
    ifequal = 200
    else = _2_ON_RAW7
    output = _2_ON7

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW7
    compare = 0
    ifequal = 200
    else = _3_ON_RAW7
    output = _3_ON7

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW7
    compare = 0
    ifequal = 200
    else = _4_ON_RAW7
    output = _4_ON7

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW7
    compare = 0
    ifequal = 200
    else = _5_ON_RAW7
    output = _5_ON7

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW7
    compare = 0
    ifequal = 200
    else = _6_ON_RAW7
    output = _6_ON7

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW7
    compare = 0
    ifequal = 200
    else = _7_ON_RAW7
    output = _7_ON7

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW7
    compare = 0
    ifequal = 200
    else = _8_ON_RAW7
    output = _8_ON7

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW7
    compare = 0
    ifequal = 200
    else = _9_ON_RAW7
    output = _9_ON7

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW7
    compare = 0
    ifequal = 200
    else = _10_ON_RAW7
    output = _10_ON7

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW7
    compare = 0
    ifequal = 200
    else = _11_ON_RAW7
    output = _11_ON7

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW7
    compare = 0
    ifequal = 200
    else = _12_ON_RAW7
    output = _12_ON7

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW7
    compare = 0
    ifequal = 200
    else = _13_ON_RAW7
    output = _13_ON7

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW7
    compare = 0
    ifequal = 200
    else = _14_ON_RAW7
    output = _14_ON7

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW7
    compare = 0
    ifequal = 200
    else = _15_ON_RAW7
    output = _15_ON7

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW7
    compare = 0
    ifequal = 200
    else = _16_ON_RAW7
    output = _16_ON7

# min of 1 or 2 enabled
[math]
    input1 = _1_ON7
    input2 = _2_ON7
    minimum = _12_MIN7

# min of 3 or 4 enabled
[math]
    input1 = _3_ON7
    input2 = _4_ON7
    minimum = _34_MIN7

# min of 5 or 6 enabled
[math]
    input1 = _5_ON7
    input2 = _6_ON7
    minimum = _56_MIN7

# min of 7 or 8 enabled
[math]
    input1 = _7_ON7
    input2 = _8_ON7
    minimum = _78_MIN7

# min of 9 or 10 enabled
[math]
    input1 = _9_ON7
    input2 = _10_ON7
    minimum = _9_10_MIN7

# min of 11 or 12 enabled
[math]
    input1 = _11_ON7
    input2 = _12_ON7
    minimum = _11_12_MIN7

# min of 13 or 15 enabled
[math]
    input1 = _13_ON7
    input2 = _14_ON7
    minimum = _13_14_MIN7

# min of 15 or 16 enabled
[math]
    input1 = _15_ON7
    input2 = _16_ON7
    minimum = _15_16_MIN7

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN7
    input2 = _34_MIN7
    minimum = _1234_MIN7

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN7
    input2 = _78_MIN7
    minimum = _5678_MIN7

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN7
    input2 = _11_12_MIN7
    minimum = _9_12_MIN7

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN7
    input2 = _15_16_MIN7
    minimum = _13_16_MIN7

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN7
    input2 = _5678_MIN7
    minimum = _1_8_MIN7

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN7
    input2 = _13_16_MIN7
    minimum = _9_16_MIN7

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN7
    input2 = _9_16_MIN7
    minimum = _FIRST_ENABLED7

# 2 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 1
    ifless = _2_ON7
    else = 200
    output = _2_CAN7

# 3 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 2
    ifless = _3_ON7
    else = 200
    output = _3_CAN7

# 4 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 3
    ifless = _4_ON7
    else = 200
    output = _4_CAN7

# 5 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 4
    ifless = _5_ON7
    else = 200
    output = _5_CAN7

# 6 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 5
    ifless = _6_ON7
    else = 200
    output = _6_CAN7

# 7 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 6
    ifless = _7_ON7
    else = 200
    output = _7_CAN7

# 8 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 7
    ifless = _8_ON7
    else = 200
    output = _8_CAN7

# 9 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 8
    ifless = _9_ON7
    else = 200
    output = _9_CAN7

# 10 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 9
    ifless = _10_ON7
    else = 200
    output = _10_CAN7

# 11 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 10
    ifless = _11_ON7
    else = 200
    output = _11_CAN7

# 12 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 11
    ifless = _12_ON7
    else = 200
    output = _12_CAN7

# 13 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 12
    ifless = _13_ON7
    else = 200
    output = _13_CAN7

# 14 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 13
    ifless = _14_ON7
    else = 200
    output = _14_CAN7

# 15 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 14
    ifless = _15_ON7
    else = 200
    output = _15_CAN7

# 16 chain candidacy
[compare]
    input = _ACTIVE_PRE_7
    compare = 15
    ifless = _16_ON7
    else = 200
    output = _16_CAN7

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CAN7
    input2 = _4_CAN7
    minimum = _34_CAN7

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CAN7
    input2 = _6_CAN7
    minimum = _56_CAN7

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CAN7
    input2 = _8_CAN7
    minimum = _78_CAN7

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CAN7
    input2 = _10_CAN7
    minimum = _9_10_CAN7

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CAN7
    input2 = _12_CAN7
    minimum = _11_12_CAN7

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CAN7
    input2 = _14_CAN7
    minimum = _13_14_CAN7

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CAN7
    input2 = _16_CAN7
    minimum = _15_16_CAN7

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CAN7
    input2 = _34_CAN7
    minimum = _1234_CAN7

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CAN7
    input2 = _78_CAN7
    minimum = _5678_CAN7

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CAN7
    input2 = _11_12_CAN7
    minimum = _9_12_CAN7

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CAN7
    input2 = _15_16_CAN7
    minimum = _13_16_CAN7

[math]
    input1 = _1234_CAN7
    input2 = _5678_CAN7
    minimum = _1_8_CAN7

[math]
    input1 = _9_12_CAN7
    input2 = _13_16_CAN7
    minimum = _9_16_CAN7

# minimum next sequencer candidate or 200 if none -> _NXT_CAN
[math]
    input1 = _1_8_CAN7
    input2 = _9_16_CAN7
    minimum = _NXT_CAN7

[compare]
    input = _NXT_CAN7
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED7
    else = -1 * 1 + _NXT_CAN7
    output = _NXT_PRE_7

# ADVANCE causes ACTIVE_PRE_ to be set to NXT_OFFSET
[sample]
    input = _NXT_PRE_7
    sample = _SMP_NXT_7
    output = _ACTIVE_PRE_7

# -------------------------------------------------
# pitch pots 7
# -------------------------------------------------

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P1.1
    outputscale = 0.6
    output = _7_CV_1

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P2.1
    outputscale = 0.6
    output = _7_CV_2

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P3.1
    outputscale = 0.6
    output = _7_CV_3

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P4.1
    outputscale = 0.6
    output = _7_CV_4

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P1.2
    outputscale = 0.6
    output = _7_CV_5

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P2.2
    outputscale = 0.6
    output = _7_CV_6

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P3.2
    outputscale = 0.6
    output = _7_CV_7

# pitch pot
[pot]
    select = _S_7_CV_8
    preset = _ACTIVE_PRE_7
    pot = P4.2
    outputscale = 0.6
    output = _7_CV_8

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P1.1
    outputscale = 0.6
    output = _7_CV_9

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P2.1
    outputscale = 0.6
    output = _7_CV_10

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P3.1
    outputscale = 0.6
    output = _7_CV_11

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P4.1
    outputscale = 0.6
    output = _7_CV_12

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P1.2
    outputscale = 0.6
    output = _7_CV_13

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P2.2
    outputscale = 0.6
    output = _7_CV_14

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P3.2
    outputscale = 0.6
    output = _7_CV_15

# pitch pot
[pot]
    select = _S_7_CV_16
    preset = _ACTIVE_PRE_7
    pot = P4.2
    outputscale = 0.6
    output = _7_CV_16

# -------------------------------------------------
# vco algo and pots 7
# -------------------------------------------------

# length
[button]
    button = B2.8
    doubleclickmode = 1
    offvalue = 0
    onvalue = 1
    select = _S_ALGO_7
    startvalue = 0
    led = L2.8
    output = _7_LEN_FN

[algoquencer]
    activity = _7_ACTIVITY
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    clock = _7_CLOCK
    lengthbutton = _7_LEN_FN
    pattern = 0
    pitch1 = _7_CV_1
    pitch2 = _7_CV_2
    pitch3 = _7_CV_3
    pitch4 = _7_CV_4
    pitch5 = _7_CV_5
    pitch6 = _7_CV_6
    pitch7 = _7_CV_7
    pitch8 = _7_CV_8
    pitch9 = _7_CV_9
    pitch10 = _7_CV_10
    pitch11 = _7_CV_11
    pitch12 = _7_CV_12
    pitch13 = _7_CV_13
    pitch14 = _7_CV_14
    pitch15 = _7_CV_15
    pitch16 = _7_CV_16
    preset = _ACTIVE_PRE_7
    reset = I2
    select = _S_ALGO_7
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    pitch = _7_CV
    startofbar = _SMP_NXT_7
    trigger = G7

# 7 attack
[pot]
    notch = 0
    outputscale = 1
    pot = P1.1
    preset = _PRE
    select = _S_7_ENV
    output = _7_ATTACK

# 7 decay
[pot]
    notch = 0
    outputscale = 1
    pot = P2.1
    preset = _PRE
    select = _S_7_ENV
    output = _7_DECAY

# 7 sustain
[pot]
    notch = 0
    outputscale = 1
    pot = P3.1
    preset = _PRE
    select = _S_7_ENV
    output = _7_SUSTAIN

# 7 release
[pot]
    notch = 0
    outputscale = 1
    pot = P4.1
    preset = _PRE
    select = _S_7_ENV
    output = _7_RELEASE

# 7 velocity
[pot]
    notch = 0
    outputscale = 1
    pot = P1.2
    preset = _PRE
    select = _S_7_ENV
    output = _7_VELOCITY

# 7 hold
[pot]
    notch = 0
    outputscale = 1
    pot = P2.2
    preset = _PRE
    select = _S_7_ENV
    output = _7_HOLD

# 7 shape
[pot]
    notch = 0
    outputscale = 1
    pot = P3.2
    preset = _PRE
    select = _S_7_ENV
    output = _7_SHAPE

# 7 env level
[pot]
    notch = 0
    outputscale = 1
    pot = P4.2
    preset = _PRE
    select = _S_7_ENV
    output = _7_ENV_LEVEL

[contour]
    attack = _7_ATTACK * 32
    decay = _7_DECAY * 8
    hold = _7_HOLD
    level = _7_ENV_LEVEL * 0.5
    release = _7_RELEASE * 4
    shape = _7_SHAPE
    sustain = _7_SUSTAIN * 8
    trigger = G7
    velocity = _7_VELOCITY
    output = _7_ENV_PRE_MIN

# set volume to the min of the input and the envelope
[math]
    input1 = I3
    input2 = _7_ENV_PRE_MIN
    minimum = O3

# -------------------------------------------------
# speed and scale pots
# -------------------------------------------------

# _5_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _5_CLOCK_DIV
    output = _5_CLOCK

# clock div = 2 ^ pot value
[math]
    power = _5_CLOCK_DIV
    input1 = 2
    input2 = _5_CLOCK_DIV_UNSCALED

# 5 per-preset clock division
[pot]
    discrete = 4
    preset = _ACTIVE_PRE_5
    select = _MODE
    output = _5_CLOCK_DIV_UNSCALED
    selectat = 60
    pot = P1.1

# _6_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _6_CLOCK_DIV
    output = _6_CLOCK

# clock div = 2 ^ pot value
[math]
    power = _6_CLOCK_DIV
    input1 = 2
    input2 = _6_CLOCK_DIV_UNSCALED

# 6 per-preset clock division
[pot]
    preset = _ACTIVE_PRE_6
    discrete = 4
    output = _6_CLOCK_DIV_UNSCALED
    select = _MODE
    selectat = 60
    pot = P2.1

# _7_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _7_CLOCK_DIV
    output = _7_CLOCK

# clock div = 2 ^ pot value
[math]
    power = _7_CLOCK_DIV
    input1 = 2
    input2 = _7_CLOCK_DIV_UNSCALED

# 7 per-preset clock division
[pot]
    preset = _ACTIVE_PRE_7
    discrete = 4
    output = _7_CLOCK_DIV_UNSCALED
    select = _MODE
    selectat = 60
    pot = P3.1

# _GLOBAL_ROOT
[pot]
    preset = _PRE
    select = _MODE
    selectat = 60
    discrete = 12
    pot = P4.1
    output = _GLOBAL_ROOT

# _GLOBAL_SCALE
[pot]
    preset = _PRE
    select = _MODE
    selectat = 60
    discrete = 12
    pot = P4.2
    output = _GLOBAL_SCALE

# 5 filter
[minifonion]
    degree = _GLOBAL_SCALE
    input = _5_CV
    noteshift = _XSEQ_ADD_5
    root = _GLOBAL_ROOT
    trigger = G5
    output = O5

# 6 filter
[minifonion]
    noteshift = _XSEQ_ADD_6
    input = _6_CV
    trigger = G6
    root = _GLOBAL_ROOT
    degree = _GLOBAL_SCALE
    output = O6

# 7 filter
[minifonion]
    noteshift = _XSEQ_ADD_7
    input = _7_CV
    trigger = G7
    root = _GLOBAL_ROOT
    degree = _GLOBAL_SCALE
    output = O7

# -------------------------------------------------
# x-seq
# -------------------------------------------------

[pot]
    output = _XSEQ_1
    discrete = 19
    select = _SEL
    selectat = 75
    preset = _XSEQ_PRE
    pot = P1.1

[pot]
    output = _XSEQ_2
    discrete = 19
    select = _SEL
    selectat = 75
    preset = _XSEQ_PRE
    pot = P2.1

[pot]
    output = _XSEQ_3
    discrete = 19
    select = _SEL
    selectat = 75
    preset = _XSEQ_PRE
    pot = P3.1

[pot]
    output = _XSEQ_4
    discrete = 19
    select = _SEL
    selectat = 75
    preset = _XSEQ_PRE
    pot = P4.1

[switch]
    reset = I2
    input1 = _XSEQ_1
    input2 = _XSEQ_2
    input3 = _XSEQ_3
    input4 = _XSEQ_4
    forward = _SMP_NXT_5
    output1 = _XSEQ_ADD_5
    offset = 0

# xseq 5 leds
[switch]
    backward = _SMP_NXT_5
    reset = I2
    input1 = 1
    output1 = R1
    output2 = R2
    output3 = R3
    output4 = R4
    offset = 0

[pot]
    discrete = 19
    output = _XSEQ_5
    select = _SEL
    selectat = 76
    preset = _XSEQ_PRE
    pot = P1.1

[pot]
    output = _XSEQ_6
    discrete = 19
    select = _SEL
    selectat = 76
    preset = _XSEQ_PRE
    pot = P2.1

[pot]
    output = _XSEQ_7
    discrete = 19
    select = _SEL
    selectat = 76
    preset = _XSEQ_PRE
    pot = P3.1

[pot]
    output = _XSEQ_8
    discrete = 19
    select = _SEL
    selectat = 76
    preset = _XSEQ_PRE
    pot = P4.1

[switch]
    reset = I2
    input1 = _XSEQ_5
    input2 = _XSEQ_6
    input3 = _XSEQ_7
    input4 = _XSEQ_8
    forward = _SMP_NXT_6
    output1 = _XSEQ_ADD_6
    offset = 0

# xseq 6 leds
[switch]
    backward = _SMP_NXT_6
    reset = I2
    input1 = 1
    output1 = R5
    output2 = R6
    output3 = R7
    output4 = R8
    offset = 0

[pot]
    discrete = 19
    output = _XSEQ_9
    select = _SEL
    selectat = 77
    preset = _XSEQ_PRE
    pot = P1.1

[pot]
    output = _XSEQ_10
    discrete = 19
    select = _SEL
    selectat = 77
    preset = _XSEQ_PRE
    pot = P2.1

[pot]
    output = _XSEQ_11
    discrete = 19
    select = _SEL
    selectat = 77
    preset = _XSEQ_PRE
    pot = P3.1

[pot]
    output = _XSEQ_12
    discrete = 19
    select = _SEL
    selectat = 77
    preset = _XSEQ_PRE
    pot = P4.1

[switch]
    reset = I2
    input1 = _XSEQ_9
    input2 = _XSEQ_10
    input3 = _XSEQ_11
    input4 = _XSEQ_12
    forward = _SMP_NXT_7
    output1 = _XSEQ_ADD_7
    offset = 0

# xseq 7 leds
[switch]
    backward = _SMP_NXT_7
    reset = I2
    input1 = 1
    output1 = R9
    output2 = R10
    output3 = R11
    output4 = R12
    offset = 0

# xseq presets
[buttongroup]
    maxactive = 1
    minactive = 1
    preset = _PRE
    select = _MODE
    selectat = 70
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _XSEQ_PRE

# -------------------------------------------------
# save and load _PRE
# -------------------------------------------------

[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 1
    minactive = 1
    preset = 0
    select = _MODE
    selectat = 80
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _PRE_SEL

# delays preset changes until the next start of chain 1
[sample]
    input = _PRE_SEL
    sample = _1_STARTOFBAR
    output = _PRE
