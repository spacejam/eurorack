# INPUTS:
#  I1: [clock]
#  I2: [reset]

# OUTPUTS:
#  O1: [env 1]
#  O5: [pitch 5]
#  O6: [pitch 6]
#  O7: [pitch 7]
#  O8: [pitch 8]

# GATES:
#  G1: [trig 1]
#  G2: [trig 2]
#  G3: [trig 3]
#  G4: [trig 4]
#  G5: [gate 5]
#  G6: [gate 6]
#  G7: [trig 7]
#  G8: [trig 8]

# CONTROLLER 1:
#  B1.1: [seq]
#  B1.2: [chain]
#  B1.3: [activities]
#  B1.4: [env]
#  B1.5: [speed]
#  B1.6: [scale]
#  B1.8: [preset]

# CONTROLLER 2:
#  B2.1: [sub 1]
#  B2.2: [sub 2]
#  B2.3: [sub 3]
#  B2.4: [sub 4]
#  B2.5: [sub 5]
#  B2.6: [sub 6]
#  B2.7: [sub 7]
#  B2.8: [sub 8]

# CONTROLLER 3:
#  B3.1: [1]
#  B3.2: [2]
#  B3.3: [5]
#  B3.4: [6]
#  B3.5: [9]
#  B3.6: [10]
#  B3.7: [13]
#  B3.8: [14]

# CONTROLLER 4:
#  B4.1: [3]
#  B4.2: [4]
#  B4.3: [7]
#  B4.4: [8]
#  B4.5: [11]
#  B4.6: [12]
#  B4.7: [15]
#  B4.8: [16]

[p2b8]
[p2b8]
[p2b8]
[p2b8]

# -------------------------------------------------
# _SELECT
# -------------------------------------------------

# _MODE
[buttongroup]
    button1 = B1.1
    button2 = B1.2
    button3 = B1.3
    button4 = B1.4
    button5 = B1.5
    button6 = B1.6
    button7 = B1.7
    button8 = B1.8
    maxactive = 1
    minactive = 1
    preset = 0
    value1 = 10
    value2 = 20
    value3 = 30
    value4 = 40
    value5 = 50
    value6 = 60
    value7 = 70
    value8 = 80
    led1 = L1.1
    led2 = L1.2
    led3 = L1.3
    led4 = L1.4
    led5 = L1.5
    led6 = L1.6
    led7 = L1.7
    led8 = L1.8
    output = _MODE

# _SUBPAGE
[buttongroup]
    output = _SUBPAGE
    button1 = B2.1
    button2 = B2.2
    button3 = B2.3
    button4 = B2.4
    button5 = B2.5
    button6 = B2.6
    button7 = B2.7
    button8 = B2.8
    maxactive = 1
    minactive = 0
    preset = 0
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L2.1
    led2 = L2.2
    led3 = L2.3
    led4 = L2.4
    led5 = L2.5
    led6 = L2.6
    led7 = L2.7
    led8 = L2.8

# _MODE + _SUBPAGE = _SELECT
[math]
    input1 = _MODE
    input2 = _SUBPAGE
    sum = _SELECT

# -------------------------------------------------
# drum algoquencers 1-4
# -------------------------------------------------

[algoquencer]
    startofbar = _SAMPLE_NEXT
    trigger = G1
    clock = _1_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
#   length = _DRUM_ALGOQUENCER_1_LENGTH + 1
    pattern = 0
    select = _SELECT
    selectat = 11
    preset = _ACTIVE_OFFSET
    activity = _1_ACTIVITY
#   variation = _DRUM_ALGOQUENCER_1_VARIATION
#   dejavu = _DRUM_ALGOQUENCER_1_DEJAVU
#   morphs = _DRUM_ALGOQUENCER_1_MORPHS
#   branches = _DRUM_ALGOQUENCER_1_BRANCHES
#   fills = _DRUM_ALGOQUENCER_1_FILLS
#   fillorder = _DRUM_ALGOQUENCER_1_FILLORDER
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    activity = _2_ACTIVITY
    startofbar = _SAMPLE_NEXT2
    trigger = G2
    clock = _2_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 12
    preset = _ACTIVE_OFFSET2
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    activity = _3_ACTIVITY
    startofbar = _SAMPLE_NEXT3
    trigger = G3
    clock = _3_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 13
    preset = _ACTIVE_OFFSET3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[algoquencer]
    activity = _4_ACTIVITY
    startofbar = _SAMPLE_NEXT4
    trigger = G4
    clock = _4_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = 16
    pattern = 0
    select = _SELECT
    selectat = 14
    preset = _ACTIVE_OFFSET4
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# -------------------------------------------------
# vco algo and pots 5
# -------------------------------------------------

[algoquencer]
    startofbar = _SAMPLE_NEXT5
    pitch = _5_PITCH
    gate = G5
    clock = _5_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = _VCO_ALGOQUENCER_1_LENGTH2 + 1
    pattern = 0
    select = _SELECT
    selectat = 15
    preset = _ACTIVE_OFFSET5
    gatelength = _5_GATE_LENGTH
    activity = _5_ACTIVITY
    variation = _VCO_ALGOQUENCER_1_VARIATION2
    dejavu = _VCO_ALGOQUENCER_1_DEJAVU2
    morphs = _VCO_ALGOQUENCER_1_MORPHS2
    fills = _VCO_ALGOQUENCER_1_FILLS2
    repeats = _VCO_ALGOQUENCER_1_REPEATS2
    fillorder = _VCO_ALGOQUENCER_1_FILLORDER2
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[pot]
    discrete = 16
    select = _SELECT
    selectat = 15
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _VCO_ALGOQUENCER_1_LENGTH2

[pot]
    select = _SELECT
    selectat = 15
    pot = P4.1
    outputscale = 1
    notch = 0.1
    output = _5_GATE_LENGTH

[pot]
    select = _SELECT
    selectat = 15
    pot = P3.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_VARIATION2

[pot]
    select = _SELECT
    selectat = 15
    pot = P2.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_DEJAVU2

[pot]
    select = _SELECT
    selectat = 15
    pot = P1.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_MORPHS2

[pot]
    select = _SELECT
    selectat = 15
    pot = P3.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_FILLS2

[pot]
    discrete = 4
    select = _SELECT
    selectat = 15
    pot = P2.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_FILLORDER2

[pot]
    discrete = 8
    select = _SELECT
    selectat = 15
    pot = P1.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_REPEATS2

# -------------------------------------------------
# vco algo and pots 6
# -------------------------------------------------

[algoquencer]
    startofbar = _SAMPLE_NEXT6
    pitch = _6_PITCH
    gate = G6
    clock = _6_CLOCK
    reset = I2
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    length = _VCO_ALGOQUENCER_1_LENGTH3 + 1
    pattern = 0
    select = _SELECT
    selectat = 16
    preset = _ACTIVE_OFFSET5
    activity = _6_ACTIVITY
    gatelength = _6_GATE_LENGTH
    variation = _VCO_ALGOQUENCER_1_VARIATION3
    dejavu = _VCO_ALGOQUENCER_1_DEJAVU3
    morphs = _VCO_ALGOQUENCER_1_MORPHS3
    fills = _VCO_ALGOQUENCER_1_FILLS3
    repeats = _VCO_ALGOQUENCER_1_REPEATS3
    fillorder = _VCO_ALGOQUENCER_1_FILLORDER3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

[pot]
    discrete = 16
    select = _SELECT
    selectat = 16
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _VCO_ALGOQUENCER_1_LENGTH3

[pot]
    select = _SELECT
    selectat = 16
    pot = P4.1
    outputscale = 1
    notch = 0.1
    output = _6_GATE_LENGTH

[pot]
    select = _SELECT
    selectat = 16
    pot = P3.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_VARIATION3

[pot]
    select = _SELECT
    selectat = 16
    pot = P2.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_DEJAVU3

[pot]
    select = _SELECT
    selectat = 16
    pot = P1.1
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_MORPHS3

[pot]
    select = _SELECT
    selectat = 16
    pot = P3.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_FILLS3

[pot]
    discrete = 4
    select = _SELECT
    selectat = 16
    pot = P2.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_FILLORDER3

[pot]
    discrete = 8
    select = _SELECT
    selectat = 16
    pot = P1.2
    outputscale = 1
    notch = 0.1
    output = _VCO_ALGOQUENCER_1_REPEATS3

# -------------------------------------------------
# chain 1
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 21
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW
    buttonoutput2 = _2_ON_RAW
    buttonoutput3 = _3_ON_RAW
    buttonoutput4 = _4_ON_RAW
    buttonoutput5 = _5_ON_RAW
    buttonoutput6 = _6_ON_RAW
    buttonoutput7 = _7_ON_RAW
    buttonoutput8 = _8_ON_RAW
    buttonoutput9 = _9_ON_RAW
    buttonoutput10 = _10_ON_RAW
    buttonoutput11 = _11_ON_RAW
    buttonoutput12 = _12_ON_RAW
    buttonoutput13 = _13_ON_RAW
    buttonoutput14 = _14_ON_RAW
    buttonoutput15 = _15_ON_RAW
    buttonoutput16 = _16_ON_RAW
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW
    compare = 0
    ifequal = 200
    else = _1_ON_RAW
    output = _1_ON

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW
    compare = 0
    ifequal = 200
    else = _2_ON_RAW
    output = _2_ON

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW
    compare = 0
    ifequal = 200
    else = _3_ON_RAW
    output = _3_ON

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW
    compare = 0
    ifequal = 200
    else = _4_ON_RAW
    output = _4_ON

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW
    compare = 0
    ifequal = 200
    else = _5_ON_RAW
    output = _5_ON

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW
    compare = 0
    ifequal = 200
    else = _6_ON_RAW
    output = _6_ON

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW
    compare = 0
    ifequal = 200
    else = _7_ON_RAW
    output = _7_ON

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW
    compare = 0
    ifequal = 200
    else = _8_ON_RAW
    output = _8_ON

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW
    compare = 0
    ifequal = 200
    else = _9_ON_RAW
    output = _9_ON

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW
    compare = 0
    ifequal = 200
    else = _10_ON_RAW
    output = _10_ON

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW
    compare = 0
    ifequal = 200
    else = _11_ON_RAW
    output = _11_ON

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW
    compare = 0
    ifequal = 200
    else = _12_ON_RAW
    output = _12_ON

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW
    compare = 0
    ifequal = 200
    else = _13_ON_RAW
    output = _13_ON

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW
    compare = 0
    ifequal = 200
    else = _14_ON_RAW
    output = _14_ON

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW
    compare = 0
    ifequal = 200
    else = _15_ON_RAW
    output = _15_ON

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW
    compare = 0
    ifequal = 200
    else = _16_ON_RAW
    output = _16_ON

# min of 1 or 2 enabled
[math]
    input1 = _1_ON
    input2 = _2_ON
    minimum = _12_MIN

# min of 3 or 4 enabled
[math]
    input1 = _3_ON
    input2 = _4_ON
    minimum = _34_MIN

# min of 5 or 6 enabled
[math]
    input1 = _5_ON
    input2 = _6_ON
    minimum = _56_MIN

# min of 7 or 8 enabled
[math]
    input1 = _7_ON
    input2 = _8_ON
    minimum = _78_MIN

# min of 9 or 10 enabled
[math]
    input1 = _9_ON
    input2 = _10_ON
    minimum = _9_10_MIN

# min of 11 or 12 enabled
[math]
    input1 = _11_ON
    input2 = _12_ON
    minimum = _11_12_MIN

# min of 13 or 15 enabled
[math]
    input1 = _13_ON
    input2 = _14_ON
    minimum = _13_14_MIN

# min of 15 or 16 enabled
[math]
    input1 = _15_ON
    input2 = _16_ON
    minimum = _15_16_MIN

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN
    input2 = _34_MIN
    minimum = _1234_MIN

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN
    input2 = _78_MIN
    minimum = _5678_MIN

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN
    input2 = _11_12_MIN
    minimum = _9_12_MIN

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN
    input2 = _15_16_MIN
    minimum = _13_16_MIN

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN
    input2 = _5678_MIN
    minimum = _1_8_MIN

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN
    input2 = _13_16_MIN
    minimum = _9_16_MIN

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN
    input2 = _9_16_MIN
    minimum = _FIRST_ENABLED

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 1
    ifless = _2_ON
    else = 200
    output = _2_CANDIDATE

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 2
    ifless = _3_ON
    else = 200
    output = _3_CANDIDATE

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 3
    ifless = _4_ON
    else = 200
    output = _4_CANDIDATE

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 4
    ifless = _5_ON
    else = 200
    output = _5_CANDIDATE

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 5
    ifless = _6_ON
    else = 200
    output = _6_CANDIDATE

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 6
    ifless = _7_ON
    else = 200
    output = _7_CANDIDATE

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 7
    ifless = _8_ON
    else = 200
    output = _8_CANDIDATE

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 8
    ifless = _9_ON
    else = 200
    output = _9_CANDIDATE

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 9
    ifless = _10_ON
    else = 200
    output = _10_CANDIDATE

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 10
    ifless = _11_ON
    else = 200
    output = _11_CANDIDATE

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 11
    ifless = _12_ON
    else = 200
    output = _12_CANDIDATE

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 12
    ifless = _13_ON
    else = 200
    output = _13_CANDIDATE

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 13
    ifless = _14_ON
    else = 200
    output = _14_CANDIDATE

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 14
    ifless = _15_ON
    else = 200
    output = _15_CANDIDATE

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET
    compare = 15
    ifless = _16_ON
    else = 200
    output = _16_CANDIDATE

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE
    input2 = _4_CANDIDATE
    minimum = _34_CANDIDATE

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE
    input2 = _6_CANDIDATE
    minimum = _56_CANDIDATE

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE
    input2 = _8_CANDIDATE
    minimum = _78_CANDIDATE

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE
    input2 = _10_CANDIDATE
    minimum = _9_10_CANDIDATE

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE
    input2 = _12_CANDIDATE
    minimum = _11_12_CANDIDATE

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE
    input2 = _14_CANDIDATE
    minimum = _13_14_CANDIDATE

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE
    input2 = _16_CANDIDATE
    minimum = _15_16_CANDIDATE

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE
    input2 = _34_CANDIDATE
    minimum = _1234_CANDIDATE

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE
    input2 = _78_CANDIDATE
    minimum = _5678_CANDIDATE

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE
    input2 = _11_12_CANDIDATE
    minimum = _9_12_CANDIDATE

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE
    input2 = _15_16_CANDIDATE
    minimum = _13_16_CANDIDATE

[math]
    input1 = _1234_CANDIDATE
    input2 = _5678_CANDIDATE
    minimum = _1_8_CANDIDATE

[math]
    input1 = _9_12_CANDIDATE
    input2 = _13_16_CANDIDATE
    minimum = _9_16_CANDIDATE

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE
    input2 = _9_16_CANDIDATE
    minimum = _NEXT_CANDIDATE

[compare]
    input = _NEXT_CANDIDATE
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED
    else = -1 * 1 + _NEXT_CANDIDATE
    output = _NEXT_OFFSET

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET
    sample = _SAMPLE_NEXT
    output = _ACTIVE_OFFSET

# -------------------------------------------------
# chain 2
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 22
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW2
    buttonoutput2 = _2_ON_RAW2
    buttonoutput3 = _3_ON_RAW2
    buttonoutput4 = _4_ON_RAW2
    buttonoutput5 = _5_ON_RAW2
    buttonoutput6 = _6_ON_RAW2
    buttonoutput7 = _7_ON_RAW2
    buttonoutput8 = _8_ON_RAW2
    buttonoutput9 = _9_ON_RAW2
    buttonoutput10 = _10_ON_RAW2
    buttonoutput11 = _11_ON_RAW2
    buttonoutput12 = _12_ON_RAW2
    buttonoutput13 = _13_ON_RAW2
    buttonoutput14 = _14_ON_RAW2
    buttonoutput15 = _15_ON_RAW2
    buttonoutput16 = _16_ON_RAW2
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW2
    compare = 0
    ifequal = 200
    else = _1_ON_RAW2
    output = _1_ON2

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW2
    compare = 0
    ifequal = 200
    else = _2_ON_RAW2
    output = _2_ON2

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW2
    compare = 0
    ifequal = 200
    else = _3_ON_RAW2
    output = _3_ON2

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW2
    compare = 0
    ifequal = 200
    else = _4_ON_RAW2
    output = _4_ON2

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW2
    compare = 0
    ifequal = 200
    else = _5_ON_RAW2
    output = _5_ON2

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW2
    compare = 0
    ifequal = 200
    else = _6_ON_RAW2
    output = _6_ON2

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW2
    compare = 0
    ifequal = 200
    else = _7_ON_RAW2
    output = _7_ON2

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW2
    compare = 0
    ifequal = 200
    else = _8_ON_RAW2
    output = _8_ON2

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW2
    compare = 0
    ifequal = 200
    else = _9_ON_RAW2
    output = _9_ON2

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW2
    compare = 0
    ifequal = 200
    else = _10_ON_RAW2
    output = _10_ON2

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW2
    compare = 0
    ifequal = 200
    else = _11_ON_RAW2
    output = _11_ON2

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW2
    compare = 0
    ifequal = 200
    else = _12_ON_RAW2
    output = _12_ON2

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW2
    compare = 0
    ifequal = 200
    else = _13_ON_RAW2
    output = _13_ON2

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW2
    compare = 0
    ifequal = 200
    else = _14_ON_RAW2
    output = _14_ON2

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW2
    compare = 0
    ifequal = 200
    else = _15_ON_RAW2
    output = _15_ON2

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW2
    compare = 0
    ifequal = 200
    else = _16_ON_RAW2
    output = _16_ON2

# min of 1 or 2 enabled
[math]
    input1 = _1_ON2
    input2 = _2_ON2
    minimum = _12_MIN2

# min of 3 or 4 enabled
[math]
    input1 = _3_ON2
    input2 = _4_ON2
    minimum = _34_MIN2

# min of 5 or 6 enabled
[math]
    input1 = _5_ON2
    input2 = _6_ON2
    minimum = _56_MIN2

# min of 7 or 8 enabled
[math]
    input1 = _7_ON2
    input2 = _8_ON2
    minimum = _78_MIN2

# min of 9 or 10 enabled
[math]
    input1 = _9_ON2
    input2 = _10_ON2
    minimum = _9_10_MIN2

# min of 11 or 12 enabled
[math]
    input1 = _11_ON2
    input2 = _12_ON2
    minimum = _11_12_MIN2

# min of 13 or 15 enabled
[math]
    input1 = _13_ON2
    input2 = _14_ON2
    minimum = _13_14_MIN2

# min of 15 or 16 enabled
[math]
    input1 = _15_ON2
    input2 = _16_ON2
    minimum = _15_16_MIN2

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN2
    input2 = _34_MIN2
    minimum = _1234_MIN2

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN2
    input2 = _78_MIN2
    minimum = _5678_MIN2

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN2
    input2 = _11_12_MIN2
    minimum = _9_12_MIN2

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN2
    input2 = _15_16_MIN2
    minimum = _13_16_MIN2

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN2
    input2 = _5678_MIN2
    minimum = _1_8_MIN2

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN2
    input2 = _13_16_MIN2
    minimum = _9_16_MIN2

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN2
    input2 = _9_16_MIN2
    minimum = _FIRST_ENABLED2

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 1
    ifless = _2_ON2
    else = 200
    output = _2_CANDIDATE2

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 2
    ifless = _3_ON2
    else = 200
    output = _3_CANDIDATE2

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 3
    ifless = _4_ON2
    else = 200
    output = _4_CANDIDATE2

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 4
    ifless = _5_ON2
    else = 200
    output = _5_CANDIDATE2

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 5
    ifless = _6_ON2
    else = 200
    output = _6_CANDIDATE2

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 6
    ifless = _7_ON2
    else = 200
    output = _7_CANDIDATE2

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 7
    ifless = _8_ON2
    else = 200
    output = _8_CANDIDATE2

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 8
    ifless = _9_ON2
    else = 200
    output = _9_CANDIDATE2

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 9
    ifless = _10_ON2
    else = 200
    output = _10_CANDIDATE2

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 10
    ifless = _11_ON2
    else = 200
    output = _11_CANDIDATE2

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 11
    ifless = _12_ON2
    else = 200
    output = _12_CANDIDATE2

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 12
    ifless = _13_ON2
    else = 200
    output = _13_CANDIDATE2

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 13
    ifless = _14_ON2
    else = 200
    output = _14_CANDIDATE2

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 14
    ifless = _15_ON2
    else = 200
    output = _15_CANDIDATE2

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET2
    compare = 15
    ifless = _16_ON2
    else = 200
    output = _16_CANDIDATE2

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE2
    input2 = _4_CANDIDATE2
    minimum = _34_CANDIDATE2

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE2
    input2 = _6_CANDIDATE2
    minimum = _56_CANDIDATE2

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE2
    input2 = _8_CANDIDATE2
    minimum = _78_CANDIDATE2

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE2
    input2 = _10_CANDIDATE2
    minimum = _9_10_CANDIDATE2

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE2
    input2 = _12_CANDIDATE2
    minimum = _11_12_CANDIDATE2

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE2
    input2 = _14_CANDIDATE2
    minimum = _13_14_CANDIDATE2

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE2
    input2 = _16_CANDIDATE2
    minimum = _15_16_CANDIDATE2

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE2
    input2 = _34_CANDIDATE2
    minimum = _1234_CANDIDATE2

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE2
    input2 = _78_CANDIDATE2
    minimum = _5678_CANDIDATE2

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE2
    input2 = _11_12_CANDIDATE2
    minimum = _9_12_CANDIDATE2

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE2
    input2 = _15_16_CANDIDATE2
    minimum = _13_16_CANDIDATE2

[math]
    input1 = _1234_CANDIDATE2
    input2 = _5678_CANDIDATE2
    minimum = _1_8_CANDIDATE2

[math]
    input1 = _9_12_CANDIDATE2
    input2 = _13_16_CANDIDATE2
    minimum = _9_16_CANDIDATE2

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE2
    input2 = _9_16_CANDIDATE2
    minimum = _NEXT_CANDIDATE2

[compare]
    input = _NEXT_CANDIDATE2
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED2
    else = -1 * 1 + _NEXT_CANDIDATE2
    output = _NEXT_OFFSET2

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET2
    sample = _SAMPLE_NEXT2
    output = _ACTIVE_OFFSET2

# -------------------------------------------------
# chain 3
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 23
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW3
    buttonoutput2 = _2_ON_RAW3
    buttonoutput3 = _3_ON_RAW3
    buttonoutput4 = _4_ON_RAW3
    buttonoutput5 = _5_ON_RAW3
    buttonoutput6 = _6_ON_RAW3
    buttonoutput7 = _7_ON_RAW3
    buttonoutput8 = _8_ON_RAW3
    buttonoutput9 = _9_ON_RAW3
    buttonoutput10 = _10_ON_RAW3
    buttonoutput11 = _11_ON_RAW3
    buttonoutput12 = _12_ON_RAW3
    buttonoutput13 = _13_ON_RAW3
    buttonoutput14 = _14_ON_RAW3
    buttonoutput15 = _15_ON_RAW3
    buttonoutput16 = _16_ON_RAW3
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW3
    compare = 0
    ifequal = 200
    else = _1_ON_RAW3
    output = _1_ON3

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW3
    compare = 0
    ifequal = 200
    else = _2_ON_RAW3
    output = _2_ON3

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW3
    compare = 0
    ifequal = 200
    else = _3_ON_RAW3
    output = _3_ON3

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW3
    compare = 0
    ifequal = 200
    else = _4_ON_RAW3
    output = _4_ON3

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW3
    compare = 0
    ifequal = 200
    else = _5_ON_RAW3
    output = _5_ON3

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW3
    compare = 0
    ifequal = 200
    else = _6_ON_RAW3
    output = _6_ON3

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW3
    compare = 0
    ifequal = 200
    else = _7_ON_RAW3
    output = _7_ON3

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW3
    compare = 0
    ifequal = 200
    else = _8_ON_RAW3
    output = _8_ON3

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW3
    compare = 0
    ifequal = 200
    else = _9_ON_RAW3
    output = _9_ON3

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW3
    compare = 0
    ifequal = 200
    else = _10_ON_RAW3
    output = _10_ON3

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW3
    compare = 0
    ifequal = 200
    else = _11_ON_RAW3
    output = _11_ON3

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW3
    compare = 0
    ifequal = 200
    else = _12_ON_RAW3
    output = _12_ON3

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW3
    compare = 0
    ifequal = 200
    else = _13_ON_RAW3
    output = _13_ON3

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW3
    compare = 0
    ifequal = 200
    else = _14_ON_RAW3
    output = _14_ON3

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW3
    compare = 0
    ifequal = 200
    else = _15_ON_RAW3
    output = _15_ON3

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW3
    compare = 0
    ifequal = 200
    else = _16_ON_RAW3
    output = _16_ON3

# min of 1 or 2 enabled
[math]
    input1 = _1_ON3
    input2 = _2_ON3
    minimum = _12_MIN3

# min of 3 or 4 enabled
[math]
    input1 = _3_ON3
    input2 = _4_ON3
    minimum = _34_MIN3

# min of 5 or 6 enabled
[math]
    input1 = _5_ON3
    input2 = _6_ON3
    minimum = _56_MIN3

# min of 7 or 8 enabled
[math]
    input1 = _7_ON3
    input2 = _8_ON3
    minimum = _78_MIN3

# min of 9 or 10 enabled
[math]
    input1 = _9_ON3
    input2 = _10_ON3
    minimum = _9_10_MIN3

# min of 11 or 12 enabled
[math]
    input1 = _11_ON3
    input2 = _12_ON3
    minimum = _11_12_MIN3

# min of 13 or 15 enabled
[math]
    input1 = _13_ON3
    input2 = _14_ON3
    minimum = _13_14_MIN3

# min of 15 or 16 enabled
[math]
    input1 = _15_ON3
    input2 = _16_ON3
    minimum = _15_16_MIN3

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN3
    input2 = _34_MIN3
    minimum = _1234_MIN3

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN3
    input2 = _78_MIN3
    minimum = _5678_MIN3

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN3
    input2 = _11_12_MIN3
    minimum = _9_12_MIN3

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN3
    input2 = _15_16_MIN3
    minimum = _13_16_MIN3

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN3
    input2 = _5678_MIN3
    minimum = _1_8_MIN3

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN3
    input2 = _13_16_MIN3
    minimum = _9_16_MIN3

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN3
    input2 = _9_16_MIN3
    minimum = _FIRST_ENABLED3

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 1
    ifless = _2_ON3
    else = 200
    output = _2_CANDIDATE3

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 2
    ifless = _3_ON3
    else = 200
    output = _3_CANDIDATE3

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 3
    ifless = _4_ON3
    else = 200
    output = _4_CANDIDATE3

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 4
    ifless = _5_ON3
    else = 200
    output = _5_CANDIDATE3

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 5
    ifless = _6_ON3
    else = 200
    output = _6_CANDIDATE3

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 6
    ifless = _7_ON3
    else = 200
    output = _7_CANDIDATE3

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 7
    ifless = _8_ON3
    else = 200
    output = _8_CANDIDATE3

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 8
    ifless = _9_ON3
    else = 200
    output = _9_CANDIDATE3

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 9
    ifless = _10_ON3
    else = 200
    output = _10_CANDIDATE3

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 10
    ifless = _11_ON3
    else = 200
    output = _11_CANDIDATE3

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 11
    ifless = _12_ON3
    else = 200
    output = _12_CANDIDATE3

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 12
    ifless = _13_ON3
    else = 200
    output = _13_CANDIDATE3

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 13
    ifless = _14_ON3
    else = 200
    output = _14_CANDIDATE3

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 14
    ifless = _15_ON3
    else = 200
    output = _15_CANDIDATE3

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET3
    compare = 15
    ifless = _16_ON3
    else = 200
    output = _16_CANDIDATE3

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE3
    input2 = _4_CANDIDATE3
    minimum = _34_CANDIDATE3

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE3
    input2 = _6_CANDIDATE3
    minimum = _56_CANDIDATE3

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE3
    input2 = _8_CANDIDATE3
    minimum = _78_CANDIDATE3

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE3
    input2 = _10_CANDIDATE3
    minimum = _9_10_CANDIDATE3

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE3
    input2 = _12_CANDIDATE3
    minimum = _11_12_CANDIDATE3

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE3
    input2 = _14_CANDIDATE3
    minimum = _13_14_CANDIDATE3

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE3
    input2 = _16_CANDIDATE3
    minimum = _15_16_CANDIDATE3

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE3
    input2 = _34_CANDIDATE3
    minimum = _1234_CANDIDATE3

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE3
    input2 = _78_CANDIDATE3
    minimum = _5678_CANDIDATE3

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE3
    input2 = _11_12_CANDIDATE3
    minimum = _9_12_CANDIDATE3

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE3
    input2 = _15_16_CANDIDATE3
    minimum = _13_16_CANDIDATE3

[math]
    input1 = _1234_CANDIDATE3
    input2 = _5678_CANDIDATE3
    minimum = _1_8_CANDIDATE3

[math]
    input1 = _9_12_CANDIDATE3
    input2 = _13_16_CANDIDATE3
    minimum = _9_16_CANDIDATE3

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE3
    input2 = _9_16_CANDIDATE3
    minimum = _NEXT_CANDIDATE3

[compare]
    input = _NEXT_CANDIDATE3
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED3
    else = -1 * 1 + _NEXT_CANDIDATE3
    output = _NEXT_OFFSET3

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET3
    sample = _SAMPLE_NEXT3
    output = _ACTIVE_OFFSET3

# -------------------------------------------------
# chain 4
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 24
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW4
    buttonoutput2 = _2_ON_RAW4
    buttonoutput3 = _3_ON_RAW4
    buttonoutput4 = _4_ON_RAW4
    buttonoutput5 = _5_ON_RAW4
    buttonoutput6 = _6_ON_RAW4
    buttonoutput7 = _7_ON_RAW4
    buttonoutput8 = _8_ON_RAW4
    buttonoutput9 = _9_ON_RAW4
    buttonoutput10 = _10_ON_RAW4
    buttonoutput11 = _11_ON_RAW4
    buttonoutput12 = _12_ON_RAW4
    buttonoutput13 = _13_ON_RAW4
    buttonoutput14 = _14_ON_RAW4
    buttonoutput15 = _15_ON_RAW4
    buttonoutput16 = _16_ON_RAW4
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW4
    compare = 0
    ifequal = 200
    else = _1_ON_RAW4
    output = _1_ON4

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW4
    compare = 0
    ifequal = 200
    else = _2_ON_RAW4
    output = _2_ON4

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW4
    compare = 0
    ifequal = 200
    else = _3_ON_RAW4
    output = _3_ON4

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW4
    compare = 0
    ifequal = 200
    else = _4_ON_RAW4
    output = _4_ON4

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW4
    compare = 0
    ifequal = 200
    else = _5_ON_RAW4
    output = _5_ON4

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW4
    compare = 0
    ifequal = 200
    else = _6_ON_RAW4
    output = _6_ON4

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW4
    compare = 0
    ifequal = 200
    else = _7_ON_RAW4
    output = _7_ON4

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW4
    compare = 0
    ifequal = 200
    else = _8_ON_RAW4
    output = _8_ON4

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW4
    compare = 0
    ifequal = 200
    else = _9_ON_RAW4
    output = _9_ON4

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW4
    compare = 0
    ifequal = 200
    else = _10_ON_RAW4
    output = _10_ON4

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW4
    compare = 0
    ifequal = 200
    else = _11_ON_RAW4
    output = _11_ON4

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW4
    compare = 0
    ifequal = 200
    else = _12_ON_RAW4
    output = _12_ON4

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW4
    compare = 0
    ifequal = 200
    else = _13_ON_RAW4
    output = _13_ON4

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW4
    compare = 0
    ifequal = 200
    else = _14_ON_RAW4
    output = _14_ON4

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW4
    compare = 0
    ifequal = 200
    else = _15_ON_RAW4
    output = _15_ON4

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW4
    compare = 0
    ifequal = 200
    else = _16_ON_RAW4
    output = _16_ON4

# min of 1 or 2 enabled
[math]
    input1 = _1_ON4
    input2 = _2_ON4
    minimum = _12_MIN4

# min of 3 or 4 enabled
[math]
    input1 = _3_ON4
    input2 = _4_ON4
    minimum = _34_MIN4

# min of 5 or 6 enabled
[math]
    input1 = _5_ON4
    input2 = _6_ON4
    minimum = _56_MIN4

# min of 7 or 8 enabled
[math]
    input1 = _7_ON4
    input2 = _8_ON4
    minimum = _78_MIN4

# min of 9 or 10 enabled
[math]
    input1 = _9_ON4
    input2 = _10_ON4
    minimum = _9_10_MIN4

# min of 11 or 12 enabled
[math]
    input1 = _11_ON4
    input2 = _12_ON4
    minimum = _11_12_MIN4

# min of 13 or 15 enabled
[math]
    input1 = _13_ON4
    input2 = _14_ON4
    minimum = _13_14_MIN4

# min of 15 or 16 enabled
[math]
    input1 = _15_ON4
    input2 = _16_ON4
    minimum = _15_16_MIN4

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN4
    input2 = _34_MIN4
    minimum = _1234_MIN4

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN4
    input2 = _78_MIN4
    minimum = _5678_MIN4

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN4
    input2 = _11_12_MIN4
    minimum = _9_12_MIN4

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN4
    input2 = _15_16_MIN4
    minimum = _13_16_MIN4

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN4
    input2 = _5678_MIN4
    minimum = _1_8_MIN4

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN4
    input2 = _13_16_MIN4
    minimum = _9_16_MIN4

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN4
    input2 = _9_16_MIN4
    minimum = _FIRST_ENABLED4

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 1
    ifless = _2_ON4
    else = 200
    output = _2_CANDIDATE4

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 2
    ifless = _3_ON4
    else = 200
    output = _3_CANDIDATE4

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 3
    ifless = _4_ON4
    else = 200
    output = _4_CANDIDATE4

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 4
    ifless = _5_ON4
    else = 200
    output = _5_CANDIDATE4

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 5
    ifless = _6_ON4
    else = 200
    output = _6_CANDIDATE4

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 6
    ifless = _7_ON4
    else = 200
    output = _7_CANDIDATE4

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 7
    ifless = _8_ON4
    else = 200
    output = _8_CANDIDATE4

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 8
    ifless = _9_ON4
    else = 200
    output = _9_CANDIDATE4

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 9
    ifless = _10_ON4
    else = 200
    output = _10_CANDIDATE4

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 10
    ifless = _11_ON4
    else = 200
    output = _11_CANDIDATE4

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 11
    ifless = _12_ON4
    else = 200
    output = _12_CANDIDATE4

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 12
    ifless = _13_ON4
    else = 200
    output = _13_CANDIDATE4

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 13
    ifless = _14_ON4
    else = 200
    output = _14_CANDIDATE4

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 14
    ifless = _15_ON4
    else = 200
    output = _15_CANDIDATE4

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET4
    compare = 15
    ifless = _16_ON4
    else = 200
    output = _16_CANDIDATE4

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE4
    input2 = _4_CANDIDATE4
    minimum = _34_CANDIDATE4

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE4
    input2 = _6_CANDIDATE4
    minimum = _56_CANDIDATE4

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE4
    input2 = _8_CANDIDATE4
    minimum = _78_CANDIDATE4

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE4
    input2 = _10_CANDIDATE4
    minimum = _9_10_CANDIDATE4

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE4
    input2 = _12_CANDIDATE4
    minimum = _11_12_CANDIDATE4

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE4
    input2 = _14_CANDIDATE4
    minimum = _13_14_CANDIDATE4

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE4
    input2 = _16_CANDIDATE4
    minimum = _15_16_CANDIDATE4

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE4
    input2 = _34_CANDIDATE4
    minimum = _1234_CANDIDATE4

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE4
    input2 = _78_CANDIDATE4
    minimum = _5678_CANDIDATE4

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE4
    input2 = _11_12_CANDIDATE4
    minimum = _9_12_CANDIDATE4

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE4
    input2 = _15_16_CANDIDATE4
    minimum = _13_16_CANDIDATE4

[math]
    input1 = _1234_CANDIDATE4
    input2 = _5678_CANDIDATE4
    minimum = _1_8_CANDIDATE4

[math]
    input1 = _9_12_CANDIDATE4
    input2 = _13_16_CANDIDATE4
    minimum = _9_16_CANDIDATE4

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE4
    input2 = _9_16_CANDIDATE4
    minimum = _NEXT_CANDIDATE4

[compare]
    input = _NEXT_CANDIDATE4
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED4
    else = -1 * 1 + _NEXT_CANDIDATE4
    output = _NEXT_OFFSET4

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET4
    sample = _SAMPLE_NEXT4
    output = _ACTIVE_OFFSET4

# -------------------------------------------------
# chain 5
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 25
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW5
    buttonoutput2 = _2_ON_RAW5
    buttonoutput3 = _3_ON_RAW5
    buttonoutput4 = _4_ON_RAW5
    buttonoutput5 = _5_ON_RAW5
    buttonoutput6 = _6_ON_RAW5
    buttonoutput7 = _7_ON_RAW5
    buttonoutput8 = _8_ON_RAW5
    buttonoutput9 = _9_ON_RAW5
    buttonoutput10 = _10_ON_RAW5
    buttonoutput11 = _11_ON_RAW5
    buttonoutput12 = _12_ON_RAW5
    buttonoutput13 = _13_ON_RAW5
    buttonoutput14 = _14_ON_RAW5
    buttonoutput15 = _15_ON_RAW5
    buttonoutput16 = _16_ON_RAW5
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW5
    compare = 0
    ifequal = 200
    else = _1_ON_RAW5
    output = _1_ON5

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW5
    compare = 0
    ifequal = 200
    else = _2_ON_RAW5
    output = _2_ON5

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW5
    compare = 0
    ifequal = 200
    else = _3_ON_RAW5
    output = _3_ON5

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW5
    compare = 0
    ifequal = 200
    else = _4_ON_RAW5
    output = _4_ON5

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW5
    compare = 0
    ifequal = 200
    else = _5_ON_RAW5
    output = _5_ON5

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW5
    compare = 0
    ifequal = 200
    else = _6_ON_RAW5
    output = _6_ON5

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW5
    compare = 0
    ifequal = 200
    else = _7_ON_RAW5
    output = _7_ON5

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW5
    compare = 0
    ifequal = 200
    else = _8_ON_RAW5
    output = _8_ON5

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW5
    compare = 0
    ifequal = 200
    else = _9_ON_RAW5
    output = _9_ON5

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW5
    compare = 0
    ifequal = 200
    else = _10_ON_RAW5
    output = _10_ON5

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW5
    compare = 0
    ifequal = 200
    else = _11_ON_RAW5
    output = _11_ON5

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW5
    compare = 0
    ifequal = 200
    else = _12_ON_RAW5
    output = _12_ON5

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW5
    compare = 0
    ifequal = 200
    else = _13_ON_RAW5
    output = _13_ON5

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW5
    compare = 0
    ifequal = 200
    else = _14_ON_RAW5
    output = _14_ON5

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW5
    compare = 0
    ifequal = 200
    else = _15_ON_RAW5
    output = _15_ON5

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW5
    compare = 0
    ifequal = 200
    else = _16_ON_RAW5
    output = _16_ON5

# min of 1 or 2 enabled
[math]
    input1 = _1_ON5
    input2 = _2_ON5
    minimum = _12_MIN5

# min of 3 or 4 enabled
[math]
    input1 = _3_ON5
    input2 = _4_ON5
    minimum = _34_MIN5

# min of 5 or 6 enabled
[math]
    input1 = _5_ON5
    input2 = _6_ON5
    minimum = _56_MIN5

# min of 7 or 8 enabled
[math]
    input1 = _7_ON5
    input2 = _8_ON5
    minimum = _78_MIN5

# min of 9 or 10 enabled
[math]
    input1 = _9_ON5
    input2 = _10_ON5
    minimum = _9_10_MIN5

# min of 11 or 12 enabled
[math]
    input1 = _11_ON5
    input2 = _12_ON5
    minimum = _11_12_MIN5

# min of 13 or 15 enabled
[math]
    input1 = _13_ON5
    input2 = _14_ON5
    minimum = _13_14_MIN5

# min of 15 or 16 enabled
[math]
    input1 = _15_ON5
    input2 = _16_ON5
    minimum = _15_16_MIN5

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN5
    input2 = _34_MIN5
    minimum = _1234_MIN5

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN5
    input2 = _78_MIN5
    minimum = _5678_MIN5

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN5
    input2 = _11_12_MIN5
    minimum = _9_12_MIN5

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN5
    input2 = _15_16_MIN5
    minimum = _13_16_MIN5

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN5
    input2 = _5678_MIN5
    minimum = _1_8_MIN5

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN5
    input2 = _13_16_MIN5
    minimum = _9_16_MIN5

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN5
    input2 = _9_16_MIN5
    minimum = _FIRST_ENABLED5

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 1
    ifless = _2_ON5
    else = 200
    output = _2_CANDIDATE5

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 2
    ifless = _3_ON5
    else = 200
    output = _3_CANDIDATE5

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 3
    ifless = _4_ON5
    else = 200
    output = _4_CANDIDATE5

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 4
    ifless = _5_ON5
    else = 200
    output = _5_CANDIDATE5

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 5
    ifless = _6_ON5
    else = 200
    output = _6_CANDIDATE5

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 6
    ifless = _7_ON5
    else = 200
    output = _7_CANDIDATE5

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 7
    ifless = _8_ON5
    else = 200
    output = _8_CANDIDATE5

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 8
    ifless = _9_ON5
    else = 200
    output = _9_CANDIDATE5

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 9
    ifless = _10_ON5
    else = 200
    output = _10_CANDIDATE5

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 10
    ifless = _11_ON5
    else = 200
    output = _11_CANDIDATE5

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 11
    ifless = _12_ON5
    else = 200
    output = _12_CANDIDATE5

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 12
    ifless = _13_ON5
    else = 200
    output = _13_CANDIDATE5

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 13
    ifless = _14_ON5
    else = 200
    output = _14_CANDIDATE5

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 14
    ifless = _15_ON5
    else = 200
    output = _15_CANDIDATE5

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET5
    compare = 15
    ifless = _16_ON5
    else = 200
    output = _16_CANDIDATE5

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE5
    input2 = _4_CANDIDATE5
    minimum = _34_CANDIDATE5

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE5
    input2 = _6_CANDIDATE5
    minimum = _56_CANDIDATE5

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE5
    input2 = _8_CANDIDATE5
    minimum = _78_CANDIDATE5

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE5
    input2 = _10_CANDIDATE5
    minimum = _9_10_CANDIDATE5

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE5
    input2 = _12_CANDIDATE5
    minimum = _11_12_CANDIDATE5

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE5
    input2 = _14_CANDIDATE5
    minimum = _13_14_CANDIDATE5

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE5
    input2 = _16_CANDIDATE5
    minimum = _15_16_CANDIDATE5

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE5
    input2 = _34_CANDIDATE5
    minimum = _1234_CANDIDATE5

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE5
    input2 = _78_CANDIDATE5
    minimum = _5678_CANDIDATE5

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE5
    input2 = _11_12_CANDIDATE5
    minimum = _9_12_CANDIDATE5

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE5
    input2 = _15_16_CANDIDATE5
    minimum = _13_16_CANDIDATE5

[math]
    input1 = _1234_CANDIDATE5
    input2 = _5678_CANDIDATE5
    minimum = _1_8_CANDIDATE5

[math]
    input1 = _9_12_CANDIDATE5
    input2 = _13_16_CANDIDATE5
    minimum = _9_16_CANDIDATE5

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE5
    input2 = _9_16_CANDIDATE5
    minimum = _NEXT_CANDIDATE5

[compare]
    input = _NEXT_CANDIDATE5
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED5
    else = -1 * 1 + _NEXT_CANDIDATE5
    output = _NEXT_OFFSET5

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET5
    sample = _SAMPLE_NEXT5
    output = _ACTIVE_OFFSET5

# -------------------------------------------------
# chain 6
# -------------------------------------------------

# sequencer chain selection
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 16
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 25
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    value9 = 9
    value10 = 10
    value11 = 11
    value12 = 12
    value13 = 13
    value14 = 14
    value15 = 15
    value16 = 16
    buttonoutput1 = _1_ON_RAW6
    buttonoutput2 = _2_ON_RAW6
    buttonoutput3 = _3_ON_RAW6
    buttonoutput4 = _4_ON_RAW6
    buttonoutput5 = _5_ON_RAW6
    buttonoutput6 = _6_ON_RAW6
    buttonoutput7 = _7_ON_RAW6
    buttonoutput8 = _8_ON_RAW6
    buttonoutput9 = _9_ON_RAW6
    buttonoutput10 = _10_ON_RAW6
    buttonoutput11 = _11_ON_RAW6
    buttonoutput12 = _12_ON_RAW6
    buttonoutput13 = _13_ON_RAW6
    buttonoutput14 = _14_ON_RAW6
    buttonoutput15 = _15_ON_RAW6
    buttonoutput16 = _16_ON_RAW6
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8

# if 1 enabled, send 1, else 200 into _1_ON
[compare]
    input = _1_ON_RAW6
    compare = 0
    ifequal = 200
    else = _1_ON_RAW6
    output = _1_ON6

# if 2 enabled, send 2, else 200 into _2_ON
[compare]
    input = _2_ON_RAW6
    compare = 0
    ifequal = 200
    else = _2_ON_RAW6
    output = _2_ON6

# if 3 enabled, send 3, else 200 into _3_ON
[compare]
    input = _3_ON_RAW6
    compare = 0
    ifequal = 200
    else = _3_ON_RAW6
    output = _3_ON6

# if 4 enabled, send 4, else 200 into _4_ON
[compare]
    input = _4_ON_RAW6
    compare = 0
    ifequal = 200
    else = _4_ON_RAW6
    output = _4_ON6

# if 5 enabled, send 5, else 200 into _5_ON
[compare]
    input = _5_ON_RAW6
    compare = 0
    ifequal = 200
    else = _5_ON_RAW6
    output = _5_ON6

# if 6 enabled, send 6, else 200 into _6_ON
[compare]
    input = _6_ON_RAW6
    compare = 0
    ifequal = 200
    else = _6_ON_RAW6
    output = _6_ON6

# if 7 enabled, send 7, else 200 into _7_ON
[compare]
    input = _7_ON_RAW6
    compare = 0
    ifequal = 200
    else = _7_ON_RAW6
    output = _7_ON6

# if 8 enabled, send 8, else 200 into _8_ON
[compare]
    input = _8_ON_RAW6
    compare = 0
    ifequal = 200
    else = _8_ON_RAW6
    output = _8_ON6

# if 9 enabled, send 9, else 200 into _9_ON
[compare]
    input = _9_ON_RAW6
    compare = 0
    ifequal = 200
    else = _9_ON_RAW6
    output = _9_ON6

# if 10 enabled, send 10, else 200 into _10_ON
[compare]
    input = _10_ON_RAW6
    compare = 0
    ifequal = 200
    else = _10_ON_RAW6
    output = _10_ON6

# if 11 enabled, send 11, else 200 into _11_ON
[compare]
    input = _11_ON_RAW6
    compare = 0
    ifequal = 200
    else = _11_ON_RAW6
    output = _11_ON6

# if 12 enabled, send 12, else 200 into _12_ON
[compare]
    input = _12_ON_RAW6
    compare = 0
    ifequal = 200
    else = _12_ON_RAW6
    output = _12_ON6

# if 13 enabled, send 13, else 200 into _13_ON
[compare]
    input = _13_ON_RAW6
    compare = 0
    ifequal = 200
    else = _13_ON_RAW6
    output = _13_ON6

# if 14 enabled, send 14, else 200 into _14_ON
[compare]
    input = _14_ON_RAW6
    compare = 0
    ifequal = 200
    else = _14_ON_RAW6
    output = _14_ON6

# if 15 enabled, send 15, else 200 into _15_ON
[compare]
    input = _15_ON_RAW6
    compare = 0
    ifequal = 200
    else = _15_ON_RAW6
    output = _15_ON6

# if 16 enabled, send 16, else 200 into _16_ON
[compare]
    input = _16_ON_RAW6
    compare = 0
    ifequal = 200
    else = _16_ON_RAW6
    output = _16_ON6

# min of 1 or 2 enabled
[math]
    input1 = _1_ON6
    input2 = _2_ON6
    minimum = _12_MIN6

# min of 3 or 4 enabled
[math]
    input1 = _3_ON6
    input2 = _4_ON6
    minimum = _34_MIN6

# min of 5 or 6 enabled
[math]
    input1 = _5_ON6
    input2 = _6_ON6
    minimum = _56_MIN6

# min of 7 or 8 enabled
[math]
    input1 = _7_ON6
    input2 = _8_ON6
    minimum = _78_MIN6

# min of 9 or 10 enabled
[math]
    input1 = _9_ON6
    input2 = _10_ON6
    minimum = _9_10_MIN6

# min of 11 or 12 enabled
[math]
    input1 = _11_ON6
    input2 = _12_ON6
    minimum = _11_12_MIN6

# min of 13 or 15 enabled
[math]
    input1 = _13_ON6
    input2 = _14_ON6
    minimum = _13_14_MIN6

# min of 15 or 16 enabled
[math]
    input1 = _15_ON6
    input2 = _16_ON6
    minimum = _15_16_MIN6

# min of 12 or 34 enabled
[math]
    input1 = _12_MIN6
    input2 = _34_MIN6
    minimum = _1234_MIN6

# min of 56 or 78 enabled
[math]
    input1 = _56_MIN6
    input2 = _78_MIN6
    minimum = _5678_MIN6

# min of 9-12 enabled
[math]
    input1 = _9_10_MIN6
    input2 = _11_12_MIN6
    minimum = _9_12_MIN6

# min of 13-16 enabled
[math]
    input1 = _13_14_MIN6
    input2 = _15_16_MIN6
    minimum = _13_16_MIN6

# min of 1234 or 5678 enabled -> _1_8_MIN
[math]
    input1 = _1234_MIN6
    input2 = _5678_MIN6
    minimum = _1_8_MIN6

# min of 9-16 enabled -> _9_16_MIN
[math]
    input1 = _9_12_MIN6
    input2 = _13_16_MIN6
    minimum = _9_16_MIN6

# min of 1-16 enabled -> _FIRST_ENABLED
[math]
    input1 = _1_8_MIN6
    input2 = _9_16_MIN6
    minimum = _FIRST_ENABLED6

# 2 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 1
    ifless = _2_ON6
    else = 200
    output = _2_CANDIDATE6

# 3 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 2
    ifless = _3_ON6
    else = 200
    output = _3_CANDIDATE6

# 4 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 3
    ifless = _4_ON6
    else = 200
    output = _4_CANDIDATE6

# 5 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 4
    ifless = _5_ON6
    else = 200
    output = _5_CANDIDATE6

# 6 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 5
    ifless = _6_ON6
    else = 200
    output = _6_CANDIDATE6

# 7 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 6
    ifless = _7_ON6
    else = 200
    output = _7_CANDIDATE6

# 8 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 7
    ifless = _8_ON6
    else = 200
    output = _8_CANDIDATE6

# 9 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 8
    ifless = _9_ON6
    else = 200
    output = _9_CANDIDATE6

# 10 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 9
    ifless = _10_ON6
    else = 200
    output = _10_CANDIDATE6

# 11 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 10
    ifless = _11_ON6
    else = 200
    output = _11_CANDIDATE6

# 12 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 11
    ifless = _12_ON6
    else = 200
    output = _12_CANDIDATE6

# 13 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 12
    ifless = _13_ON6
    else = 200
    output = _13_CANDIDATE6

# 14 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 13
    ifless = _14_ON6
    else = 200
    output = _14_CANDIDATE6

# 15 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 14
    ifless = _15_ON6
    else = 200
    output = _15_CANDIDATE6

# 16 chain candidacy
[compare]
    input = _ACTIVE_OFFSET6
    compare = 15
    ifless = _16_ON6
    else = 200
    output = _16_CANDIDATE6

# minimum of 3 or 4 candidacy
[math]
    input1 = _3_CANDIDATE6
    input2 = _4_CANDIDATE6
    minimum = _34_CANDIDATE6

# minimum of 5 or 6 candidacy
[math]
    input1 = _5_CANDIDATE6
    input2 = _6_CANDIDATE6
    minimum = _56_CANDIDATE6

# minimum of 7 or 8 candidacy
[math]
    input1 = _7_CANDIDATE6
    input2 = _8_CANDIDATE6
    minimum = _78_CANDIDATE6

# minimum of 9 or 10 candidacy
[math]
    input1 = _9_CANDIDATE6
    input2 = _10_CANDIDATE6
    minimum = _9_10_CANDIDATE6

# minimum of 11 or 12 candidacy
[math]
    input1 = _11_CANDIDATE6
    input2 = _12_CANDIDATE6
    minimum = _11_12_CANDIDATE6

# minimum of 13 or 14 candidacy
[math]
    input1 = _13_CANDIDATE6
    input2 = _14_CANDIDATE6
    minimum = _13_14_CANDIDATE6

# minimum of 15 or 16 candidacy
[math]
    input1 = _15_CANDIDATE6
    input2 = _16_CANDIDATE6
    minimum = _15_16_CANDIDATE6

# minimum of 2, 34 candidacy. 1 is never a candidate for next, only first.
[math]
    input1 = _2_CANDIDATE6
    input2 = _34_CANDIDATE6
    minimum = _1234_CANDIDATE6

# minimum of 56 and 78 candidacy
[math]
    input1 = _56_CANDIDATE6
    input2 = _78_CANDIDATE6
    minimum = _5678_CANDIDATE6

# minimum of 9-12 candidacy
[math]
    input1 = _9_10_CANDIDATE6
    input2 = _11_12_CANDIDATE6
    minimum = _9_12_CANDIDATE6

# minimum of 13-16 candidacy
[math]
    input1 = _13_14_CANDIDATE6
    input2 = _15_16_CANDIDATE6
    minimum = _13_16_CANDIDATE6

[math]
    input1 = _1234_CANDIDATE6
    input2 = _5678_CANDIDATE6
    minimum = _1_8_CANDIDATE6

[math]
    input1 = _9_12_CANDIDATE6
    input2 = _13_16_CANDIDATE6
    minimum = _9_16_CANDIDATE6

# minimum next sequencer candidate or 200 if none -> _NEXT_CANDIDATE
[math]
    input1 = _1_8_CANDIDATE6
    input2 = _9_16_CANDIDATE6
    minimum = _NEXT_CANDIDATE6

[compare]
    input = _NEXT_CANDIDATE6
    compare = 200
    ifequal = -1 * 1 + _FIRST_ENABLED6
    else = -1 * 1 + _NEXT_CANDIDATE6
    output = _NEXT_OFFSET6

# ADVANCE causes ACTIVE_OFFSET to be set to NEXT_OFFSET
[sample]
    input = _NEXT_OFFSET6
    sample = _SAMPLE_NEXT6
    output = _ACTIVE_OFFSET6

# -------------------------------------------------
# activities
# -------------------------------------------------

# 1 activity
[pot]
    pot = P1.1
    outputscale = 1
    notch = 0.1
    output = _1_ACTIVITY
    select = _MODE
    selectat = 40

# 2 activity
[pot]
    pot = P2.1
    outputscale = 1
    notch = 0.1
    output = _2_ACTIVITY
    select = _MODE
    selectat = 40

# 3 activity
[pot]
    pot = P3.1
    outputscale = 1
    notch = 0.1
    output = _3_ACTIVITY
    select = _MODE
    selectat = 40

# 4 activity
[pot]
    pot = P4.1
    outputscale = 1
    notch = 0.1
    output = _4_ACTIVITY
    select = _MODE
    selectat = 40

# 5 activity
[pot]
    pot = P1.2
    outputscale = 1
    notch = 0.1
    output = _5_ACTIVITY
    select = _MODE
    selectat = 40

# 6 activity
[pot]
    pot = P2.2
    outputscale = 1
    notch = 0.1
    output = _6_ACTIVITY
    select = _MODE
    selectat = 40

# -------------------------------------------------
# kick env
# -------------------------------------------------

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P1.1
    outputscale = 1
    notch = 0
    output = _KICK_ATTACK

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P2.1
    outputscale = 1
    notch = 0
    output = _KICK_DECAY

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P3.1
    outputscale = 1
    notch = 0
    output = _KICK_SUSTAIN

# kick decay
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P4.1
    outputscale = 1
    notch = 0
    output = _KICK_RELEASE

# kick env
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P1.2
    outputscale = 1
    notch = 0
    output = _KICK_VELOCITY

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P2.2
    outputscale = 1
    notch = 0
    output = _KICK_HOLD

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P3.2
    outputscale = 1
    notch = 0
    output = _KICK_SHAPE

# kick pitch
[pot]
    preset = _KICK_ENV_PRESET
    select = _SELECT
    selectat = 41
    pot = P4.2
    outputscale = 1
    notch = 0
    output = _KICK_PITCH

[contour]
    velocity = _KICK_VELOCITY
    level = _KICK_PITCH * 0.5
    shape = _KICK_SHAPE
    trigger = G1
    attack = _KICK_ATTACK
    hold = _KICK_HOLD
    decay = _KICK_DECAY * _KICK_DECAY
    sustain = _KICK_SUSTAIN
    release = _KICK_RELEASE
    output = O1

# kick env presets
[buttongroup]
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 41
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _KICK_ENV_PRESET

# -------------------------------------------------
# lengths
# -------------------------------------------------

# -------------------------------------------------
# speed
# -------------------------------------------------

# _1_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _1_CLOCK_DIV
    multiply = _1_CLOCK_MULT
    output = _1_CLOCK

# seq 1 mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 51
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _1_CLOCK_MULT

# seq 1 div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 51
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _1_CLOCK_DIV

# _2_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _2_CLOCK_DIV
    multiply = _2_CLOCK_MULT
    output = _2_CLOCK

# _2_CLOCK mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 52
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _2_CLOCK_MULT

# _2_CLOCK div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 52
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _2_CLOCK_DIV

# _3_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _3_CLOCK_DIV
    multiply = _3_CLOCK_MULT
    output = _3_CLOCK

# _3_CLOCK mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 53
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _3_CLOCK_MULT

# _3_CLOCK div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 53
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _3_CLOCK_DIV

# _4_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _4_CLOCK_DIV
    multiply = _4_CLOCK_MULT
    output = _4_CLOCK

# _4_CLOCK mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 54
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _4_CLOCK_MULT

# _4_CLOCK div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 54
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _4_CLOCK_DIV

# _5_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _5_CLOCK_DIV
    multiply = _5_CLOCK_MULT
    output = _5_CLOCK

# _5_CLOCK mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 55
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _5_CLOCK_MULT

# _5_CLOCK div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 55
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _5_CLOCK_DIV

# _6_CLOCK
[clocktool]
    clock = I1
    reset = I2
    divide = _6_CLOCK_DIV
    multiply = _6_CLOCK_MULT
    output = _6_CLOCK

# _6_CLOCK mult
[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 56
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    output = _6_CLOCK_MULT

# _6_CLOCK div
[buttongroup]
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    button8 = B4.8
    maxactive = 1
    minactive = 1
    preset = _PRESET
    select = _SELECT
    selectat = 56
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    value8 = 8
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    led8 = L4.8
    output = _6_CLOCK_DIV

# _7_CLOCK
# [clocktool]
#   clock = I1
#   reset = I2
#   divide = _7_CLOCK_DIV
#   multiply = _7_CLOCK_MULT
#   output = _7_CLOCK

# _7_CLOCK mult
# [buttongroup]
#   button1 = B3.1
#   button2 = B3.2
#   button3 = B4.1
#   button4 = B4.2
#   button5 = B3.3
#   button6 = B3.4
#   button7 = B4.3
#   button8 = B4.4
#   maxactive = 1
#   minactive = 1
#   preset = _PRESET
#   select = _SELECT
#   selectat = 57
#   value1 = 1
#   value2 = 2
#   value3 = 3
#   value4 = 4
#   value5 = 5
#   value6 = 6
#   value7 = 7
#   value8 = 8
#   led1 = L3.1
#   led2 = L3.2
#   led3 = L4.1
#   led4 = L4.2
#   led5 = L3.3
#   led6 = L3.4
#   led7 = L4.3
#   led8 = L4.4
#   output = _7_CLOCK_MULT

# _7_CLOCK div
# [buttongroup]
#   button1 = B3.5
#   button2 = B3.6
#   button3 = B4.5
#   button4 = B4.6
#   button5 = B3.7
#   button6 = B3.8
#   button7 = B4.7
#   button8 = B4.8
#   maxactive = 1
#   minactive = 1
#   preset = _PRESET
#   select = _SELECT
#   selectat = 57
#   value1 = 1
#   value2 = 2
#   value3 = 3
#   value4 = 4
#   value5 = 5
#   value6 = 6
#   value7 = 7
#   value8 = 8
#   led1 = L3.5
#   led2 = L3.6
#   led3 = L4.5
#   led4 = L4.6
#   led5 = L3.7
#   led6 = L3.8
#   led7 = L4.7
#   led8 = L4.8
#   output = _7_CLOCK_DIV

# _8_CLOCK
# [clocktool]
#   clock = I1
#   reset = I2
#   divide = _8_CLOCK_DIV
#   multiply = _8_CLOCK_MULT
#   output = _8_CLOCK

# _8_CLOCK mult
# [buttongroup]
#   button1 = B3.1
#   button2 = B3.2
#   button3 = B4.1
#   button4 = B4.2
#   button5 = B3.3
#   button6 = B3.4
#   button7 = B4.3
#   button8 = B4.4
#   maxactive = 1
#   minactive = 1
#   preset = _PRESET
#   select = _SELECT
#   selectat = 58
#   value1 = 1
#   value2 = 2
#   value3 = 3
#   value4 = 4
#   value5 = 5
#   value6 = 6
#   value7 = 7
#   value8 = 8
#   led1 = L3.1
#   led2 = L3.2
#   led3 = L4.1
#   led4 = L4.2
#   led5 = L3.3
#   led6 = L3.4
#   led7 = L4.3
#   led8 = L4.4
#   output = _8_CLOCK_MULT

# _8_CLOCK div
# [buttongroup]
#   button1 = B3.5
#   button2 = B3.6
#   button3 = B4.5
#   button4 = B4.6
#   button5 = B3.7
#   button6 = B3.8
#   button7 = B4.7
#   button8 = B4.8
#   maxactive = 1
#   minactive = 1
#   preset = _PRESET
#   select = _SELECT
#   selectat = 58
#   value1 = 1
#   value2 = 2
#   value3 = 3
#   value4 = 4
#   value5 = 5
#   value6 = 6
#   value7 = 7
#   value8 = 8
#   led1 = L3.5
#   led2 = L3.6
#   led3 = L4.5
#   led4 = L4.6
#   led5 = L3.7
#   led6 = L3.8
#   led7 = L4.7
#   led8 = L4.8
#   output = _8_CLOCK_DIV

# -------------------------------------------------
# vco scale
# -------------------------------------------------

# scale pot
[pot]
    select = _MODE
    selectat = 60
    discrete = 12
    pot = P4.2
    output = _GLOBAL_SCALE

# root pot
[pot]
    select = _MODE
    selectat = 60
    discrete = 12
    pot = P4.1
    output = _GLOBAL_ROOT

# 5 min
[pot]
    select = _MODE
    selectat = 60
    pot = P1.2
    output = _5_MIN_PITCH

# 5 max
[pot]
    select = _MODE
    selectat = 60
    pot = P1.1
    output = _5_MAX_PITCH

[fold]
    input = _5_PITCH
    foldby = 0.1
    minimum = _5_MIN_PITCH
    maximum = _5_MAX_PITCH
    output = _5_FOLDED_PITCH

# t5 filter
[minifonion]
    selectnoteshift = _SHIFT * _NEGATE_SHIFT
    input = _5_FOLDED_PITCH
    trigger = I1
    root = _GLOBAL_ROOT
    degree = _GLOBAL_SCALE
    output = O5

# 6 min
[pot]
    select = _MODE
    selectat = 60
    pot = P2.2
    output = _6_MIN_PITCH

# 6 max
[pot]
    select = _MODE
    selectat = 60
    pot = P2.1
    output = _6_MAX_PITCH

[fold]
    input = _6_PITCH
    foldby = 0.1
    minimum = _6_MIN_PITCH
    maximum = _6_MAX_PITCH
    output = _6_FOLDED_PITCH

# t5 filter
[minifonion]
    selectnoteshift = _SHIFT * _NEGATE_SHIFT
    input = _6_FOLDED_PITCH
    trigger = I1
    root = _GLOBAL_ROOT
    degree = _GLOBAL_SCALE
    output = O6

# pitch shift
[buttongroup]
    select = _MODE
    selectat = 60
    button1 = B3.5
    button2 = B3.6
    button3 = B4.5
    button4 = B4.6
    button5 = B3.7
    button6 = B3.8
    button7 = B4.7
    maxactive = 1
    minactive = 0
    value1 = 1
    value2 = 2
    value3 = 3
    value4 = 4
    value5 = 5
    value6 = 6
    value7 = 7
    led1 = L3.5
    led2 = L3.6
    led3 = L4.5
    led4 = L4.6
    led5 = L3.7
    led6 = L3.8
    led7 = L4.7
    output = _SHIFT

# negate shift
[button]
    select = _MODE
    selectat = 60
    button = B4.8
    onvalue = -1
    offvalue = 1
    led = L4.8
    output = _NEGATE_SHIFT

# -------------------------------------------------
# save and load _PRESET
# -------------------------------------------------

[buttongroup]
    button1 = B3.1
    button2 = B3.2
    button3 = B4.1
    button4 = B4.2
    button5 = B3.3
    button6 = B3.4
    button7 = B4.3
    button8 = B4.4
    button9 = B3.5
    button10 = B3.6
    button11 = B4.5
    button12 = B4.6
    button13 = B3.7
    button14 = B3.8
    button15 = B4.7
    button16 = B4.8
    maxactive = 1
    minactive = 1
    preset = 0
    select = _MODE
    selectat = 80
    value1 = 0
    value2 = 1
    value3 = 2
    value4 = 3
    value5 = 4
    value6 = 5
    value7 = 6
    value8 = 7
    value9 = 8
    value10 = 9
    value11 = 10
    value12 = 11
    value13 = 12
    value14 = 13
    value15 = 14
    value16 = 15
    led1 = L3.1
    led2 = L3.2
    led3 = L4.1
    led4 = L4.2
    led5 = L3.3
    led6 = L3.4
    led7 = L4.3
    led8 = L4.4
    led9 = L3.5
    led10 = L3.6
    led11 = L4.5
    led12 = L4.6
    led13 = L3.7
    led14 = L3.8
    led15 = L4.7
    led16 = L4.8
    output = _PRESET
